package main

import "graphical"

var BIRD_START_X f32 = -0.75
var BIRD_START_Y f32 = 0.5
var BIRD_RADIUS f32 = 0.1
var BIRD_GRAVITY f32 = 0.001

var BIRD_SCALE_X f32 = 0.07
var BIRD_SCALE_Y f32 = 0.07

var g_bird Bird

type Bird struct{
    x f32
    y f32
    vx f32
    vy f32
    gravity f32
    radius f32

    animation [4]Sprite
    geometry graphical.PlaneGeometry
}

func NewBird() (bird Bird) {
  bird = Bird{
      x: BIRD_START_X,
      y: BIRD_START_Y,
      vx: 0.00, // Velocity in x direction
      vy: 0.00, // Velocity in y direction
      gravity: BIRD_GRAVITY,
      radius: BIRD_RADIUS}

  bird.animation[0] = NewSprite(167, 232, 17, 62)
  bird.animation[1] = NewSprite(167, 227, 67, 113)
  bird.animation[2] = NewSprite(248, 313, 17, 63)
  bird.animation[3] = NewSprite(248, 313, 67, 113)

  var mat graphical.Material
  mat = graphical.newMaterial(0.0, 0.0, 0.0)
  mat = mat.setTexture(SPRITE_MAP)

  bird.geometry = graphical.newPlaneGeometry(
      graphical.newVector3f(bird.x, bird.y, 0.0),
      graphical.newVector3f(f32.mul(bird.radius, 2.0), f32.mul(bird.radius, 2.0), 0.0),
      mat)
}

func UpdateBird(bird Bird) (bird Bird) {
  bird.vy = f32.sub(bird.vy, bird.gravity)
  bird.y = f32.add(bird.y, bird.vy)

  bird.geometry.position.x = bird.x
  bird.geometry.position.y = bird.y
}

func RenderBird(bird Bird) {
  var geometry graphical.PlaneGeometry
  geometry = bird.geometry;
  geometry.renderCustom(
      scale(167, SPRITE_MAP_WIDTH),
      scale(232, SPRITE_MAP_WIDTH),
      scale(17, SPRITE_MAP_HEIGHT),
      scale(62, SPRITE_MAP_HEIGHT))
}
