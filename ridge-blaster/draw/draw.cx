package draw

import "gl"

import "app"
import "ccInput"
import "collision"
import "entity"
import "environs"
import "mesh"


var rngCol          Color3
var NEG_UNIT_SPAN   f32 // negative... 
var CRUST_THICKNESS f32
var currX           f32
var span            f32

// single color channel intensities 
var currGreen       f32 // component of terrain fill color 
var minCI           f32 = 0.0
var darkCI          f32 = 0.12
var maxCI           f32 = 1.0
var pickR           f32 = 1.0 // picked/selected red channel 
var pickG           f32 = 0.6 // picked/selected green channel 

// blink timing 
var pickedNodesAreBright bool
var timeLocalToDraw      f32
var nextBlinkFlip        f32
var blinkDelay           f32



func Setup () {
	str.print("draw.Setup()")
	mesh.Setup()
	
	NEG_UNIT_SPAN   = -1.0
	CRUST_THICKNESS =  0.015
	blinkDelay      =  0.1
	
	// colors 
	var r f32
	var g f32
	var b f32

	/*
	r = getRandomForColorChannel()
	g = getRandomForColorChannel()
	b = getRandomForColorChannel()

	rngCol = Color3{ R: r, G: g, B: b }
	*/
}


/*
func All (currTime f32, deltaTime f32) {
	//str.print("draw.All()")

	blinkTiming(deltaTime)

	if app.Mode == app.APPMODE_EDITOR {		
		if app.EditMode != app.EDITMODE_COLORS &&
			app.EditMode != app.EDITMODE_MESH_PICKER {
			
			gl.Begin(gl.LINES)
				gridLines()
			gl.End()
		}

		gl.Begin(gl.TRIANGLES) //////////////
			if app.EditMode == app.EDITMODE_COLORS {
				trianglesForOne(mesh.RawMeshes, mesh.ColorWheel)
			} else 
			if true == true { //app.EditMode == app.EDITMODE_MESH_PICKER {
				trianglesForMenu(mesh.BakedUIMeshes, ccInput.MESH_PICKER)
			} else {
				trianglesForAll(mesh.EditLayers)
			}			
			
			trianglesForMenu(mesh.BakedUIMeshes, ccInput.EDIT_TOOLBAR)
		gl.End()

		if app.EditMode != app.EDITMODE_COLORS &&
			app.EditMode != app.EDITMODE_MESH_PICKER {
			
			gl.Begin(gl.QUADS) //////////////////
				editorQuads()
			gl.End()
			
			gl.Begin(gl.LINES)
				maybeDragBox()				
			gl.End()
		}
		
		// TODO: ADAPT THIS TO HIGHLIGHT MULTIPLE MESHES/SEPARATIONS WHEN IMPLEMENTED 
		// 		(THIS WILL ALLOW SHARED VERTEX COORDS WITH DIFFERENT COLORS SO
		// 		THERE CAN BE HARD COLOR CONTRAST BETWEEN MESHES THAT APPEAR CONNECTED) 
				
		// // draws loop from all entity positions 
		// gl.Begin(gl.LINE_LOOP) //////////////
		// 	simpleVertexSequence(0.5)
		// gl.End()
	} else { // playing (& the rest) 
		gl.Begin(gl.QUADS) //////////////////	
			Terrain(currTime)
			//EntitiesBox()
		gl.End()
		
		gl.Begin(gl.TRIANGLES)
			EntitiesMesh()
			
			if app.Mode == app.APPMODE_GAME_OVER {
				trianglesForOne(mesh.RawMeshes, mesh.GameOver)
			}
		gl.End()
	}

	// hero 
	//Circle(entity.Ents[0])
}


func blinkTiming(deltaTime f32) {
	timeLocalToDraw = f32.add(timeLocalToDraw, deltaTime)	
	for f32.lteq(nextBlinkFlip, timeLocalToDraw) {
		nextBlinkFlip = f32.add(timeLocalToDraw, blinkDelay)
		pickedNodesAreBright = bool.not(pickedNodesAreBright)
	}
}


func maybeDragBox() () {
	if ccInput.Dragging { //&&
		//app.EditMode != app.EDITMODE_TRIANGLES {
		
		if pickedNodesAreBright {
			gl.Color3f(pickR, pickG, minCI)
		} else {
			gl.Color3f(darkCI, darkCI, darkCI) // gray 
		}
		
		// horizontal lines 
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.DragStart.Y)
		
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.MousePointer.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.MousePointer.Y)
		
		// vertical lines 
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.MousePointer.Y)
		
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.MousePointer.Y)
	}
}


func trianglesForAll (meshes []Mesh2D) () {
	for i := 0; i32.lt(i, len(meshes)); i++ {
		trianglesForOne(meshes, i)
	}
}


func trianglesForMenu (meshes []Mesh2D, menuId i32) () {
	if menuId != 0 {
		printf("trianglesForMenu() menuId: %d \n", menuId)
	}
	
	for j := 0; i32.lt(j, len(ccInput.Menus[menuId].Items)); j++ {
		var bi i32 // baked mesh id 
		bi = ccInput.Menus[menuId].Items[j].BakedBackground
		
		// background 
		if bi != app.I32_MAX {
			trianglesForOne(meshes, bi)
		}
		
		// icon 
		bi = ccInput.Menus[menuId].Items[j].BakedIcon
		trianglesForOne(meshes, bi)
	}
}


func trianglesForOne (meshes []Mesh2D, i i32) () {
	//printf("trianglesForOne () id of given []Mesh2D: %d \n", i)
	
	var m Mesh2D
	m = meshes[i]

	mesh.ReportBadTriCount("trianglesForOne", len(m.TriangleIndices))

	for j := 0; i32.lt(j, len(m.TriangleIndices)); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		gl.Color3f(c.R, c.G, c.B)
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(v.X, v.Y)
	}
}


func trianglesForOneWithPos (meshes []Mesh2D, i i32, pos Vec2) () {
	//str.print("trianglesForOneWithPos ()")
	
	var m Mesh2D
	m = meshes[i]

	mesh.ReportBadTriCount("trianglesForOneWithPos", len(m.TriangleIndices))

	for j := 0; i32.lt(j, len(m.TriangleIndices)); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		//gl.Color3f(c.R, c.G, c.B)
		//gl.Color3f(maxCI, maxCI, maxCI)		
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(pos.X + v.X,   pos.Y + v.Y)
	}
}


func simpleVertexSequence (colorChanIntensity f32) () {
	gl.Color3f(colorChanIntensity, colorChanIntensity, colorChanIntensity)

	var i i32
	for i = 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]

		gl.Vertex2f(e.Pos.X, e.Pos.Y)
	}
}


func gridLines () {
	var l f32
	l = -1.0
	
	var r f32
	r = 1.0
	
	numLines := 20
	var unitSpan f32
	unitSpan = f32.mul(r, 2.0)
	unitSpan = f32.div(unitSpan, i32.f32(numLines))
	z := 0.2

	// vertical 
	var fx f32
	fx = l
	for x := 0; x <= numLines; x++ {
		setColor(x)		
		gl.Vertex3f(fx, l, z)
		gl.Vertex3f(fx, r, z)
		
		fx = f32.add(fx, unitSpan)
	}
	
	// horizontal 
	var fy f32
	fy = l
	for y := 0; y <= numLines; y++ {
		setColor(y)		
		gl.Vertex3f(l, fy, z)
		gl.Vertex3f(r, fy, z)
		
		fy = f32.add(fy, unitSpan)
	}
}


var othCol f32 = darkCI / 3.0
func setColor (i i32) {	
	if i % 4 == 0 {
		gl.Color3f(darkCI, darkCI, darkCI)
	} else {
		gl.Color3f(othCol, othCol, othCol)
	}
}


func editorQuads () () {
	var li i32
	for li = 0; i32.lt(li, len(mesh.EditLayers)); li++ {
		var cols []Color3
		cols = mesh.EditLayers[li].Colors
		
		for i := 0; i32.lt(i, len(cols)); i++ {
			//gl.Color3f(cols[i].R, cols[i].G, cols[i].B)  TODO: oscillate between this and black?  or just blink to halfway in between? 
			gl.Color3f(darkCI, darkCI, darkCI)

			if pickedNodesAreBright {
				for j := 0; j < len(mesh.PickedVerts); j++ {
					if i == mesh.PickedVerts[j] {
						gl.Color3f(pickR, pickG, minCI)
					}
				}
			}
			
			drawRect(mesh.EditLayers[li].Points[i], entity.NodeExtents)
		}
	}
}


func EntitiesBox () () {
	for i := 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]
		
		//        ______==___________________
		if i32.eq(e.Mode, entity.ENTMODE_DEAD) {
			printf("skip DEAD %d     ", i)
			//continue
		} else {		
			// colors 
			if e.Type == entity.TYPE_HERO {
				c := 0.4
				gl.Color3f(c, c, c)
			}else
			if e.Type == entity.TYPE_BULLET {
				gl.Color3f(1.0, 1.0, 0.0)
			}else
			if e.Type == entity.TYPE_ROCKET {
				gl.Color3f(1.0, 0.5, 0.0)
			}
		
			drawRect(e.Pos, e.Extents)
		}
	}
}


func EntitiesMesh () () {
	for i := 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]
		
		//        ______==___________________
		if i32.eq(e.Mode, entity.ENTMODE_DEAD) {
			printf("skip DEAD %d     ", i)
			//continue
		} else {		
			// colors 
			if e.Type == entity.TYPE_HERO {
				c := 0.4
				gl.Color3f(c, c, c)
			}else
			if e.Type == entity.TYPE_BULLET {
				gl.Color3f(1.0, 1.0, 0.0)
			}else
			if e.Type == entity.TYPE_ROCKET {
				gl.Color3f(1.0, 0.5, 0.0)
			}
		
			trianglesForOneWithPos(mesh.SizedMeshes, e.Type, e.Pos)
		}
	}
}


func Terrain (currTime f32) () {
	var num i32
	num = len(environs.Terrain)
	num = i32.sub(num, 1)
	span = f32.div(f64.f32(collision.ScreenEdgeR) * 2.0, i32.f32(num))
	currGreen = 0.2
	currX = f64.f32(collision.ScreenEdgeL)

	for i := 0; i < num; i++ {
		// draw filling (lavender/cyan gradient) 
		feedTerrainQuadToGL(i, false, currTime)

		// draw crust (random color) 
		feedTerrainQuadToGL(i, true, currTime)
		
		currGreen = f32.add(currGreen, 0.01)
		currX     = f32.add(currX,     span)
	}
	
	environs.PopulatedWithEntities = true
}


func feedTerrainQuadToGL(i i32, drawingCrust bool, currTime f32) () {
	var up f32 // upper y edge of quad 
	var lo f32 // lower y edge of quad 
	z := 0.0
	
	// 2 left points of quad 
	up = environs.Terrain[i].Floo
	if drawingCrust {
		lo = environs.Terrain[i].Floo - CRUST_THICKNESS
		gl.Color3f(rngCol.R, rngCol.G, rngCol.B)
	} else {
		lo = NEG_UNIT_SPAN	
		gl.Color3f(0.6, currGreen, 1.0)
	}
	
	
	// left edge 
	gl.Vertex3f(currX, lo, z)
	gl.Vertex3f(currX, up, z)

	
	// 2 right points of quad 
	up =  environs.Terrain[i+1].Floo
	if drawingCrust {
		lo =  environs.Terrain[i+1].Floo - CRUST_THICKNESS
	} else {
		lo = NEG_UNIT_SPAN	
	}


	// right edge 
	gl.Vertex3f(currX + span, up, z)
	gl.Vertex3f(currX + span, lo, z)


	if bool.not(environs.PopulatedWithEntities) {
		if i32.eq(i32.rand(0, 8), 0) {			
			var time f32
			time = i32.f32(i32.rand(0, 20))
			time = f32.mul(time, 0.5)
			time = f32.add(currTime, time)
			
			var pos Vec2
			pos = Vec2{ 
				X: currX + span, 
				Y: f32.add(up, entity.RocketExtents.Y) }
			
			var vel Vec2
			vel = Vec2{ Y: 0.005 }
			
			var ent Entity
			ent = Entity{
				Type: entity.TYPE_ROCKET,
				StartPos: pos,
				Pos: pos,
				Vel: vel,
				Mode: entity.ENTMODE_STATIONARY,
				NextMode: entity.ENTMODE_MOVING_STRAIGHT,
				TimeToNextMode: time,
				Extents: entity.RocketExtents }
			
			entity.Add(ent)
		}
	}
}


func getRandomForColorChannel () (out f32) {
	// 257, cuz without the +1 it can never reach value of 1.0 
	var colSpan f32
	colSpan = f32.div(1.0, 257.0)
	
	var f f32
	f = i32.f32(i32.rand(0, 257))
	
	out = f32.mul(f, colSpan)
}
*/
