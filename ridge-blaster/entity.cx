type Entity struct {
	Type i32
	StartPos Vec2 // initial spawn position, ATM just for rockets 
	Pos Vec2 // position 
	//Rot f32  // rotation (around z axis) 
	Radius f32
	Extents Vec2 // FIXME?...this obviates need for radius? 
	Vel Vec2 // velocity 
	Mode i32
	NextMode i32
	TimeToNextMode f32
	DistanceToNextMode f32
	MeshId i32
}


func Add (ent Entity) {
	//printf("entity.Add()   x: %f, y: %f \n", ent.Pos.X, ent.Pos.Y)
	Ents = append(Ents, ent)
	
	// set radius by extents 
	// (FIXME?  it's not accurate.  corners lie outside of radius) 
	if ent.Extents.X > ent.Extents.Y {
		ent.Radius = ent.Extents.X
	} else {
		ent.Radius = ent.Extents.Y
	}
}


func Update (tDelta f32, currTime f32) () {
	// 		velocity & position adjust 
	Ents[0].Vel.X = getVelocityChangesFromInput(Ents[0].Vel.X, ccInput.GoLeft(), ccInput.GoRight())
	Ents[0].Vel.Y = getVelocityChangesFromInput(Ents[0].Vel.Y, ccInput.GoDown(), ccInput.GoUp())
	Ents[0].Vel.X = getVelocityChangesOnEdgeCollision(Ents[0].Pos.X, Ents[0].Vel.X, Ents[0].Radius, collision.ScreenEdgeL, collision.ScreenEdgeR)
	Ents[0].Vel.Y = getVelocityChangesOnEdgeCollision(Ents[0].Pos.Y, Ents[0].Vel.Y, Ents[0].Radius, -1.0D, 1.0D)
	// when speed gets high enough, a simple velocity reversal isn't enough 
	// (jitters back & forth without getting back in bounds)
	Ents[0].Pos.X = ensureEntirelyWithinBounds(Ents[0].Pos.X, Ents[0].Extents.X, collision.ScreenEdgeL, collision.ScreenEdgeR)
	Ents[0].Pos.Y = ensureEntirelyWithinBounds(Ents[0].Pos.Y, Ents[0].Extents.Y, -1.0D, 1.0D)
	
	// moves 
	//		temp debug tallies 
	var movers i32
	
	var i i32
	for i = 0; i < len(Ents); i++ {
		// time-based mode changes 
		if Ents[i].TimeToNextMode != 0.0 && 
			Ents[i].TimeToNextMode <= currTime {
			
			Ents[i].Mode = Ents[i].NextMode
		}			
		
		// movement 
		if 	i32.uneq(Ents[i].Mode, ENTMODE_DEAD) && // not dead, not static 
			i32.uneq(Ents[i].Mode, ENTMODE_STATIONARY) {
			
			// move 
			movers = i32.add(movers, 1)
			Ents[i].Pos.X = f32.add(Ents[i].Pos.X, Ents[i].Vel.X)
			Ents[i].Pos.Y = f32.add(Ents[i].Pos.Y, Ents[i].Vel.Y)
			
			//if i32.eq(Ents[i].Type, TYPE_HERO) {
				//var hurrg i32
				////str.print("TYPE_HERO")
			//} else 
			if i32.eq(Ents[i].Type, TYPE_ROCKET) {
				//str.print("TYPE_ROCKET")
				
				if f32.gt(f32.sub(Ents[i].Pos.Y, Ents[i].Extents.Y), 1.0) {
					Ents[i].Pos.Y = Ents[i].StartPos.Y
				}
			} else {
				var hit bool
				var oId i32 // other (downstream) entity 
				hit, oId = checkForHitDownStream(i) // FIXME? could hit multiple targets, but only returning other for the latest 
				
				if hit {
					Ents[i].Mode   = ENTMODE_DEAD
					Ents[oId].Mode = ENTMODE_DEAD
					
					if Ents[i].Type == TYPE_HERO {
						// TODO: explode ship 
						app.Mode = app.APPMODE_GAME_OVER
					}
					
					str.print("flipped pair (mover & obstructor) to dead")
					printf("ent modes for curr: %d   -   other: %d \n", Ents[i].Mode, Ents[oId].Mode)
					continue
				}
			}
		}
	}
	
	//printf("movers: %d   -   movers: %d \n", movers, movers)
	//pollCameraControlKeys()
}


// id is the moving entity, which triggered the need to scan other entities 
func checkForHitDownStream (id i32) (hit bool, otherId i32) {
	var o i32 // other 
	for o = i32.add(id, 1); i32.lt(o, len(Ents)); o = i32.add(o, 1) {
		if collision.BoxesOverlap(Ents[id].Pos, Ents[o].Pos, Ents[id].Extents, Ents[o].Extents) {
		
			hit = true
			printf("curr id %d hit later id %d \n", id, o)
			otherId = o
		}
	}
}


func dampenNegativeMovement (currentVelocity f32, strength f32) (out f32) {
	out = f32.add(currentVelocity, app.FORCE * timeDel * strength)

	if out > 0.0 {
		out = 0.0
	}
}


func dampenPositiveMovement (currentVelocity f32, strength f32) (out f32) {
	out = f32.sub(currentVelocity, app.FORCE * timeDel * strength)

	if out < 0.0 {
		out = 0.0
	}
}


func getVelocityChangesFromInput (velocity f32, sub bool, add bool) (out f32) {
	out = velocity

	//__________________________________________________ speed up positively 
	if add {
		if out < 0.0 {
			out = dampenNegativeMovement(out, app.DAMP_FACTOR_STRONG)
		}

		out = f32.add(out, app.FORCE * timeDel)
		if f32.gt(out, app.MAX_HERO_SPEED) { // enforce speed limit 
			out = app.MAX_HERO_SPEED
		}
	} else //___________________________________________ speed up negatively 
	if sub {
		if out > 0.0 {
			out = dampenPositiveMovement(out, app.DAMP_FACTOR_STRONG)
		}

		out = f32.sub(out, app.FORCE * timeDel)
		if f32.lt(out, 0.0 - app.MAX_HERO_SPEED) { // enforce speed limit 
			out = 0.0 - app.MAX_HERO_SPEED
		}
	} else { //__________________________________________ slow down 
		if out > 0.0 {
			out = dampenPositiveMovement(out, app.DAMP_FACTOR_WEAK)
		} else
		if out < 0.0 {
			out = dampenNegativeMovement(out, app.DAMP_FACTOR_WEAK)
		}
	}
}


// position, velocity, radius, negative value edge boundary, positive value edge boundary 
func getVelocityChangesOnEdgeCollision (pos f32, vel f32, rad f32, negEdge f64, posEdge f64) (out f32) {
	out = vel

	if f32.lteq(f32.sub(pos, rad), f64.f32(negEdge)) { 
		// hit neg edge 
		out = f32.abs(vel)
	} else
	if f32.gteq(f32.add(pos, rad), f64.f32(posEdge)) { 
		// hit pos edge 
		out = 0.0 - f32.abs(vel)
	}
}


// position, radius, negative value edge boundary, positive value edge boundary 
func ensureEntirelyWithinBounds (pos f32, rad f32, negEdge f64, posEdge f64) (out f32) {
	out = pos
	var ne f32
	var pe f32
	ne = f64.f32(negEdge)
	pe = f64.f32(posEdge)

	if f32.lteq(f32.sub(pos, rad), ne) { 
		// hit neg edge 
		out = f32.add(ne, rad)
	} else
	if f32.gteq(f32.add(pos, rad), pe) { 
		// hit pos edge 
		out = f32.sub(pe, rad)
	}
}
