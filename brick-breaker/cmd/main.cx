package main

import "glfw"
import "gl"
import "os"

import "app"
import "LoopLimiter"
import "LoopTracker"

// keyboard key codes
var SPACE_KEY i32 = 32
var RIGHT_ARROW_KEY i32 = 262
var LEFT_ARROW_KEY i32 = 263

// *************************************
// Start - Game
// *************************************
var currentTime f64
var loopLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(60, true)
var animationLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(5, true)
var loopTracker LoopTracker.LoopTracker = LoopTracker.create(1.0D, "Main")

func initGlfw(window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "Brick Breaker")
    glfw.MakeContextCurrent("window")
    glfw.SetKeyCallback("window", "keyboardCallback")
}

func initOpenGL() (program i32) {
    gl.Init()
    gl.Enable(gl.BLEND)
    gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

    program = gl.CreateProgram()
    gl.LinkProgram(program)
}

func keyboardCallback(window str, key i32, scancode i32, action i32, mods i32) () {
    if i32.eq(action, 1) {
        if i32.eq(key, RIGHT_ARROW_KEY) {
            g_player.velocity.x = PLAYER_SPAWN_VEL_X;
        } else if i32.eq(key, LEFT_ARROW_KEY) {
            g_player.velocity.x = f32.mul(-1.0, PLAYER_SPAWN_VEL_X);
        } else if i32.eq(key, SPACE_KEY) {
            g_game = StartGame(g_game)
        }
    }
}

func main() {
    var window Window
    window = Window{ Width: 1024, Height: 768 }

    initGlfw(window)
    var program i32
    program = initOpenGL()

    g_game = NewGame()

    for bool.not(glfw.ShouldClose("window")) {
        gl.UseProgram(program)
        gl.ClearColor(0.0, 0.0, 0.0, 1.0)
        gl.Clear(gl.COLOR_BUFFER_BIT)
        gl.Enable(gl.TEXTURE_2D)

        currentTime = glfw.GetTime()
        loopLimiter = LoopLimiter.update(loopLimiter, currentTime)
        animationLimiter = LoopLimiter.update(animationLimiter, currentTime)
        loopTracker = LoopTracker.update(loopTracker, currentTime)

        g_game = UpdateGame(g_game)
        RenderGame(g_game)

        glfw.PollEvents()
        glfw.SwapBuffers("window")
    }
}

// *************************************
// End - Game
// *************************************
