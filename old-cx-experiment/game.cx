
var NumGrainsOfFull360    i32 = 256 // gives 64 aim possibilities per quadrant 
var Full360Grain          f32
var RadianGrainForLUT     f32 

// 		precalculated lookup table for unit radius circular points/vertices 
var NumCircleLUTPoints         i32 = 20
var CirclePointsAngleIncrement f32
var CirclePointsX              []f32
var CirclePointsY              []f32



// event/announcement text 
var EventText                  str
var EventTextDuration          f32 = 2.5
var EventTextTimeFadeStarts    f32
var EventTextIntensity         f32
var EventTextX                 f32
var EventTextY                 f32
var ScreenCenterXInGltextSpace f32 // (pixel space) 










func Init() () {
	setupFrequentlyUsedAngles()
	TextOffset = TextFraction * TextHeight

	// event/announcement text 
	EventText = Name
	ScreenCenterXInGltextSpace = i32.f32(ScreenNumPixelsWide) / 2.0
	resetEventText()

	// screen 
	// (vertical portion of aspect ratio is always 1.0 (in the movie industry) ) 
	// but we're gonna range our gl space from -1.0 to 1.0 (height of 2.0) 

	setupCirclePointTable()
}


func Update() () {
	// text events/announcements 
	if currTime > EventTextTimeFadeStarts {
		EventTextIntensity -= timeDelta * 0.5
		pixelRT            += timeDelta * 50.0
		
		for pixelRT > 1.0 {
			pixelRT -= 1.0

			EventTextX   -= 1.0
			EventTextY   += 1.0
		}
	}
}




func setupFrequentlyUsedAngles() () {
	Pi             = 3.141592654
	HalfPi         = Pi / 2.0
	Full360        = Pi * 2.0
	ThirdOf360     = Full360 / 3.0
	TwoThirdsOf360 = ThirdOf360 * 2.0
	Full360Grain   = Full360 / i32.f32(NumGrainsOfFull360)
}


func setupCirclePointTable() () {
	CirclePointsAngleIncrement = Full360 / i32.f32(NumCircleLUTPoints)

	f := 0.0
	for i := 0; i < NumCircleLUTPoints; i++ {
		CirclePointsX = []f32.append(CirclePointsX, f32.sin(f))
		CirclePointsY = []f32.append(CirclePointsY, f32.cos(f))

		f += CirclePointsAngleIncrement
	}
}









func GetDistance(aX f32, aY f32, bX f32, bY f32) (out f32) {
	xOff := bX - aX
	yOff := bY - aY
	return f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}


func RotateAroundOrigin(x f32, y f32, angle f32) (outX f32, outY f32) {
	s := f32.sin(angle)
	c := f32.cos(angle)

	return
		x * c - y * s,
		x * s + y * c
}




func SetStage(stage i32) () {
	Stage = stage
	EventText = str.concat("Stage ", i32.str(Stage))
	resetEventText()
}


func resetEventText() () {
	EventTextIntensity      = 1.0
	EventTextTimeFadeStarts = currTime + EventTextDuration
	EventTextX              = ScreenCenterXInGltextSpace
	EventTextY              = 0.0
}








