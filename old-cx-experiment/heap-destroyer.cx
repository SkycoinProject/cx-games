func makeColorPickerWheelResource () {
	var NUM_ANGS i32 = 1536 
    // 3 x 512, 512 needed to show all possible hues between 2 colors 
	// (256 settings per channel, but we alternate between inc/dec 1 chan at a time)
	var ANG_I f32 // angle increment
	ANG_I = f32.div(geom.TAU, i32.f32(NUM_ANGS))

	var CI f32 // color increment 
	CI = f32.div(1.0, i32.f32(256))

	var ang f32
	var increase bool
	increase = true

	var red   f32
	var green f32
	var blue  f32
    red = 1.0
    
	var m Mesh2D
	m = Mesh2D{ Name: "Color Picker" }
	
	var cti i32 // current triangle index 
	var hue Color3
    var inL Vec2
    var inR Vec2
    inL = Vec2{ X: 0.0, Y: 0.0 }
    inR = Vec2{ X: 0.0, Y: 0.0 }

    // for shade iteration 
    var numShades i32 = 5
    var frac      f32
    var fracInc   f32 
    fracInc = 1.0 / i32.f32(numShades)

	for     i := 0; i < NUM_ANGS;  i++ {
        for j := 0; j < numShades; j++ {
            // colors 
            hue = Color3{ R: red, G: green, B: blue }
            var c Color3 
            c = draw.GetLerpedColor3(hue, draw.White, frac)
            for q := 0; q < 3; q++ {
                m.Colors = append(
                m.Colors, c)
            }
            frac = frac + fracInc
        
            // l(eft) & r(ight)  (from center) 
            // in(ner) & ou(ter) (from center) 
            var ouL Vec2
            var ouR Vec2
    		ouL = Vec2{ X: f32.sin(ang), Y: f32.cos(ang) }
    		ang = f32.add(ang, ANG_I)
    		ouR = Vec2{ X: f32.sin(ang), Y: f32.cos(ang) }
            inL = ouL
            inR = ouR
    		
            // verts 
            m.Points = append(
    		m.Points, inL)
    		m.Points = append(
    		m.Points, ouL)
    		m.Points = append(
    		m.Points, ouR)
            /*
            m.Points = append(
            m.Points, inR)
            */

            // triangles 
            for q := 0; q < 3; q++ {
                m.TriangleIndices = append(
                m.TriangleIndices, cti)
                cti = cti + 1
            }
        }
        

        if i >= 1024 {
			if increase {
				red  = f32.add(red, CI)
			}else{
				blue = f32.sub(blue, CI)
			}
		}else
		if i >= 512 {
			if increase {
				blue  = f32.add(blue, CI)
			}else{
				green = f32.sub(green, CI)
			}
		}else{
			if increase {
				green = f32.add(green, CI)
			}else{
				red   = f32.sub(red, CI)
			}
		}

		increase = bool.not(increase)
	}
	
	makeAndReportOn(m, true)
}
