package main

import "app"
import "inputs"
import "mesh"
import "space"
import "time"



type Cell struct {
	X i32
	Y i32
}

var NumCellsAcross i32 = 20
var CellSpan       f32 = 2.0 / i32.f32(NumCellsAcross)
var Cells          [][]Cell



func gameInit () {
	app.Init("S n a k e   A r e n a", "Move with the W,A,S,D (or arrow) keys.")
	//space.Init()
	drawInit()
	inputs.Init(true)
	menuInit()
	entitiesInit()
	mesh.Init()
}


func gameUpdate () {
	time.Update()
	mesh.UpdateEditor()
	actOnButtonQueue()
	actOnKeyQueue()
	entitiesUpdate()
}


func actOnButtonQueue () {
	var button i32
	var action i32
	button, action = inputs.GetButtonEvent ()
		
	if action == app.MAX_I32 { // (QUEUE IS EMPTY) 
	}else
	if action == glfw.Repeat { // (generated by buttons that are held longer than ___) 
	}else
	if action == glfw.Release {
	}else 
	if action == glfw.Press {
		if button == glfw.MouseButtonLeft {
			if app.Mode < app.MODE_MENU_MAX { // in a menu 
				respondToMenuClicks()
			}
		}else
		if button == glfw.MouseButtonRight {
		}else 
		if button == glfw.MouseButtonMiddle {
		}
	}
}


func actOnKeyQueue () {
	var key    i32
	var action i32
	key, action = inputs.GetKeyEvent ()

	if action == glfw.Press {
		oneTimeOnly(key)
		repeaters(key)
	}else
	if action == glfw.Repeat { // (generated by keys that are held longer than ___) 
		repeaters(key)
	}else
	if action == glfw.Release {
	}
}


func oneTimeOnly (key i32) {
	if bool.not(
		inputs.OpenedMenu(key)) {
			
		inputs.CloseAppOnDeveloperShortcut(key)
	}
}


func repeaters (key i32) { 
	if app.Mode == app.MODE_PLAYING {
		if inputs.EventMoveLeft(key) {
		}else
		if inputs.EventMoveRight(key) {
		}else
		if inputs.EventMoveUp(key) {
		}else
		if inputs.EventMoveDown(key) {
		}else
		if inputs.EventAbilityLeft(key) {
		}else
		if inputs.EventAbilityRight(key) {
		}
	}
}
