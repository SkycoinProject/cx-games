package main

import "inputs"



func gameInit () {
	app.Init("S K Y   T A X I", "Move with the W,A,S,D keys.")
	draw.Init()
	inputs.Init(false)
	map.Init()
	entities.Init()
	
	space.ViewWidInPixels, 
	space.ViewHeiInPixels = glfw.GetFramebufferSize(app.Name)
	draw.OnFramebufferSize(app.Name, 
		space.ViewWidInPixels, 
		space.ViewHeiInPixels)
}


func gameUpdate () {
	respondToButtonEvents()
	respondToKeyEvents()
	entities.Update()
}


func respondToButtonEvents () {
	var button i32
	var action i32
	button, action = inputs.GetButtonEvent ()
		
	if action == glfw.Repeat { // (generated by buttons that are held longer than ___) 
	}else
	if action == glfw.Release {
	}else 
	if action == glfw.Press {
		if button == glfw.MouseButtonLeft {
			if app.Mode <= app.MODE_MENU_OPTIONS { // in a menu 
				respondToMenuClicks()
			}
			
			// do 
		}else
		if button == glfw.MouseButtonRight {
		}else 
		if button == glfw.MouseButtonMiddle {
		}
	}
}


func respondToKeyEvents () {
	var key    i32
	var action i32
	key, action = inputs.GetKeyEvent ()

	if action == glfw.Press {
		oneTimeOnly(key)
		repeaters(key)
	}else
	if action == glfw.Repeat { // (generated by keys that are held longer than ___) 
		repeaters(key)
	}else
	if action == glfw.Release {
	}
}


func oneTimeOnly (key i32) {
	if inputs.OpenedMenu(key) {
	}else{
		inputs.CloseAppOnDeveloperShortcut(key)
	}
}


func repeaters (key i32) {
	if app.Mode == app.MODE_PLAYING {
		if inputs.EventLeft(key) {
		} else
		if inputs.EventRight(key) {
		} else
		if inputs.EventUp(key) {
		} else
		if inputs.EventDown(key) {
		} else
		if inputs.EventRotateLeft(key) {
		} else
		if inputs.EventRotateRight(key) {
		}
	}
}


func respondToMenuClicks () {
}
