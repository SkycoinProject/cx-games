/*

In our imagined world for this game, the universe is filled with solid
rock everywhere.

We have a cell grid of possibilities.  We carve out air/room space
in MOST of those cells.  Some will remain
solid rock, for a bit of variety in overall map shape.

I THINK OF THE Y DIMENSION INCREASING UPWARDS
	SO KEEP THIS IN MIND WITH geom.DIR_* (directions) 
	& THE "Cells" GRID INDEXING 
	
This is how it is by default in OpenGL space, Unity and many modern 3D
apps, so I think it's important to generally use this convention. 

*/

package map

import "gl"

import "app"
import "draw"
import "entities"
import "geom"



var NumCellsAcross i32 = 4 // in both dimensions 
var WTh            f32 = 0.085 // wall thickness 
var CellSpan       f32 = 2.0 / i32.f32(NumCellsAcross)
var CellSpanHalf   f32 = CellSpan / 2.0
var Cells          [4][4]Cell   // FIXME: use constants when we can 
var Carvs          []CarvedRoom // used/carved-out locations of the Cells grid 

type Cell struct {
	CarvedId i32 // MAX_I32 == solid rock 
	Exits    []i32
}

type CarvedRoom struct {
	// insets (from room bounds) 
	/*
	Top    f32
	Right  f32
	Bottom f32
	Left   f32
	*/
	
	Pos    app.Vec2I
	Exits  []i32
}



func Init () {
	setupPossibleExits()
	carveOutConnectedRooms()
}


func GetNumCarvedOutRooms () (num i32) {
	num = len(Carvs)	
}
func GetRoom (id i32) (room CarvedRoom) {
	room = Carvs[id]
}
/*
func GetNumExitsAt (roomId i32) (num i32) {
	num = len(Carvs[roomId].Exits)
}
func GetExitAt (roomId i32, exitId i32) (num i32) {
	num = len(Carvs[roomId].Exits[exitId])
}
*/ 
// ideally, the below func would be in "sky-taxi/draw.cx", 
// but moving it there would require the 3 funcs above PLUS more, 
// in order to get all the data you'd need from the "map" package. 
// since ATM, CX 0.7.0 has trouble getting values out of packages 
// via "[package].*".  ATM CX gives lot's of unhelpful errors when 
// such out-of-package data access attempts are made 
func DrawQuads () {
	gl.Translatef(0.0-entities.ball.x, 0.0-entities.ball.y, 0.0)
	
	var x f32
	var y f32

	draw.QuadsBegin()
		var n i32 = len(Carvs)
		//printf("len(Carvs): %d \n", n)
		for i := 0; i < n; i++ {
			var x i32 = Carvs[i].Pos.X
			var y i32 = Carvs[i].Pos.Y
			
			var l f32 = f32.mul(i32.f32(x), CellSpan)
			var b f32 = f32.mul(i32.f32(y), CellSpan)
			var r f32 = l + CellSpan
			var t f32 = b + CellSpan
			
			draw.SetSequentiallyCycledColor(i32.add(x, i32.mul(y, NumCellsAcross)))
			draw.Quad(t, r, b, l)
			
			// connection rects 
			draw.SetColorByRGB(0.0, 0.0, 0.0) // black 
			var ex i32 // exit 
			
			for j := 0; j < len(Carvs[i].Exits); j++ {
				var ex i32 = Carvs[i].Exits[j]

				if ex == geom.DIR_LEFT {
					draw.Quad(t-WTh, r-WTh, b+WTh, l)
				}else	
				if ex == geom.DIR_RIGHT {
					draw.Quad(t-WTh, r,     b+WTh, l+WTh)
				}else	
				if ex == geom.DIR_DOWN {
					draw.Quad(t-WTh, r-WTh, b,     l+WTh)
				}else	
				if ex == geom.DIR_UP {
					draw.Quad(t,     r-WTh, b+WTh, l+WTh)
				}
			}
		}
	draw.End()
	
	gl.LoadIdentity()
}


func setupPossibleExits () {
	for iY := 0; iY < NumCellsAcross; iY++ {
	for iX := 0; iX < NumCellsAcross; iX++ {
		var r Cell
		r.CarvedId = app.MAX_I32
		
		if iX > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_LEFT)
		}
		
		if iX < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_RIGHT)
		}
		
		if iY > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_DOWN)
		}
		
		if iY < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_UP)
		}
		
		Cells[iY][iX] = r
		//printf("setupPossibleExits() len(r.Exits): %d \n", len(r.Exits))
		////var poss []i32 = Cells[iY][iX].Exits
		////printf("Cells[iY][iX].Exits: %d \n", len(poss))
	}
	}
}


func getRandomCarvedRoom () (x i32, y i32, c Cell, carvedRoomId i32) {
	carvedRoomId = i32.rand(0, len(Carvs))
	printf("getRandomCarvedRoom: %d \n", carvedRoomId)
	x = Carvs[carvedRoomId].Pos.X
	y = Carvs[carvedRoomId].Pos.Y
	c = Cells[y][x]
}


func carveOutConnectedRooms () {
	var x i32
	var y i32
	var oc Cell  // older cell 
	var orId i32 // older room id 
		
	var numInactives i32 = i32.rand(1, 5)
	str.print("numInactives: ")
	i32.print(numInactives)
	var n i32 = NumCellsAcross * NumCellsAcross - numInactives
	
	for i := 0; i < n; i++ {
		if /* 1st room */ i == 0 {
			// make anywhere 
			x = i32.rand(0, NumCellsAcross)
			y = i32.rand(0, NumCellsAcross)
			var cr CarvedRoom = carveOutRoom(x, y, len(Carvs))
	
			
			
			Carvs = append(
			Carvs, cr)
			printf("carved FIRST new @ %d, %d   -   len(Carvs): %d \n", x, y, len(Carvs))
		}else{
			// old cell, old (carved) room id 
			x, y, oc, orId = getRandomCarvedRoom()
			//printf("carveOutConnectedRooms() len(r.Exits): %d \n", len(r.Exits))
			
			for len(oc.Exits) < 1 {
				x, y, oc, orId = getRandomCarvedRoom()
			}
			
			// random (exit) id 
			var ri i32 = i32.rand(0, len(oc.Exits))
			var e /* exit direction (from old) */ i32 = oc.Exits[ri]

			str.print("___________________________________________________________")
			if e == geom.DIR_LEFT {
				drillConnectingWallsAndMaybeRoom(x, y, e, x-1, y)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("--------------------- Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
			}else			
			if e == geom.DIR_RIGHT {
				drillConnectingWallsAndMaybeRoom(x, y, e, x+1, y)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("--------------------- Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
			}else			
			if e == geom.DIR_DOWN {
				drillConnectingWallsAndMaybeRoom(x, y, e, x, y-1)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("--------------------- Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
			}else			
			if e == geom.DIR_UP {
				drillConnectingWallsAndMaybeRoom(x, y, e, x, y+1)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("--------------------- Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
			}
		}
	}
}


func carveOutRoom (x i32, y i32, carvedId i32) (out CarvedRoom) {
	out.Pos.X = x
	out.Pos.Y = y
	Cells[y][x].CarvedId = carvedId
}


// old x,y, new x,y 
func drillConnectingWallsAndMaybeRoom (oX i32, oY i32, dir i32, nX i32, nY i32) {
	var tr CarvedRoom // target room (of wall drilling) 
	var targId i32 = Cells[nY][nX].CarvedId

	if targId == app.MAX_I32 {
		str.print("CARVE ROOM")
		
		tr = carveOutRoom(nX, nY, len(Carvs))
		
		tr.Exits = append(
		tr.Exits, geom.GetInvertedDir(dir))
		
		Carvs = append(
		Carvs, tr)
	}else{
		str.print("DRILL WALL")
		
		tr = Carvs[targId]
		
		tr.Exits = append(
		tr.Exits, geom.GetInvertedDir(dir))
	}
	
	printf("OLD room %d, %d   %s \n", oX, oY, geom.GetTextForDir(dir))
	removeExitFromGrid(oX, oY, dir)
	
	printf("NEW room %d, %d   %s \n", nX, nY, geom.GetTextForDir(geom.GetInvertedDir(dir)))
	removeExitFromGrid(nX, nY, geom.GetInvertedDir(dir))

	printf("--------------------- tr.Exits: %d \n", len(tr.Exits))
	printf("len(Carvs): %d \n", len(Carvs))

	//if targId != app.MAX_I32 {
	//	Carvs[targId] = tr
	//}
}


func removeExitFromGrid (x i32, y i32, dir i32) {
	var log bool = false
	
	if log { 
		str.print("___________________________________________________________")
		printf("removeExitFromGrid(%d, %d, %s) \n", x, y, geom.GetTextForDir(dir))
	}
	
	var c Cell = Cells[y][x]
	// remove from Exits 
	
	if log { printf("------num exits INSIDE-BEFORE: %d \n", len(c.Exits))
	}

	var n i32 = len(c.Exits)
	for i := i32.sub(n, 1); i >= 0; i = i32.sub(i, 1) {
		var s str = geom.GetTextForDir(c.Exits[i])
		
		if c.Exits[i] == dir {
			s = str.concat(s, "  <----------------- REMOVING")
			c.Exits = remove(c.Exits, i)
		}
		
		if log { str.print(s)
		}
	}
	
	if log { printf("------num exits INSIDE-AFTER: %d \n", len(c.Exits))
	}
}
