package entities

import "app"
import "geom"
import "inputs"
import "map"
import "mov"
import "space"



type Entity struct {
	x         f32
	y         f32
	vx        f32
	vy        f32
	gravity   f32
	radius    f32
	
	GridPos   app.Vec2I
	// cell bounds/connections 
	CellMin   app.Vec2 // boundaries of the current cell it's in 
	CellMax   app.Vec2 // ^ 
	//Room    map.CarvedRoom // CAN'T FIGURE OUT WHY THIS MAKES AVATAR DISAPPEAR 
	ExitNorth bool
	ExitSouth bool
	ExitEast  bool
	ExitWest  bool
}

var ball Entity



func Init () {
	str.print("entities.Init ()")
	
	ball = Entity{
		radius:  0.05,
		x:       0.0,
		y:       0.0,
		vx:      0.0,
		vy:      0.0,
		gravity: 0.01}

	map.SetPlayerRoomBounds(i32.rand(0, map.GetNumCarvedOutRooms()), true)
}


func Update () {
	// velocity 
	//		player desired 
	mov.SetPlayerVelocityFromInput()
	
	// motion/position 
	ball.x = f32.add(ball.x, ball.vx)
	ball.y = f32.add(ball.y, ball.vy)


	// collision bounce 
	var gridDelta i32 // for player crossing boundaries into adjacent grid cells 
	
	gridDelta, ball.x, ball.vx = mov.BounceOffWalls(ball.x, ball.vx, ball.radius, 
		ball.CellMin.X, ball.CellMax.X, ball.ExitWest, ball.ExitEast) //space.ViewEdgeL, space.ViewEdgeR)
	
	if gridDelta != 0 {
		var x i32 = ball.GridPos.X + gridDelta
		var y i32 = ball.GridPos.Y
		var id i32 = map.GetCarvedIdAt(x, y)
		printf("ABOUT TO CALL SetPlayerRoomBounds - x,y: %d,%d --- id: %d \n", x, y, id)
		map.SetPlayerRoomBounds(id, false)
	}

	
	gridDelta, ball.y, ball.vy = mov.BounceOffWalls(ball.y, ball.vy, ball.radius, 
		ball.CellMin.Y, ball.CellMax.Y, ball.ExitSouth, ball.ExitNorth) //-1.0D, 1.0D)

	if gridDelta != 0 {
		var x i32 = ball.GridPos.X
		var y i32 = ball.GridPos.Y + gridDelta
		var id i32 = map.GetCarvedIdAt(x, y)
		printf("ABOUT TO CALL SetPlayerRoomBounds - x,y: %d,%d --- id: %d \n", x, y, id)
		map.SetPlayerRoomBounds(id, false)
	}

	// position correction 
	// 		when speed gets high enough, a simple velocity reversal isn't enough 
	// 		(jitters back & forth without getting back in bounds)
}
