package entities

import "app"
import "geom"
import "inputs"
import "mov"
import "space"
import "time"



type Entity struct {
	x         f32
	y         f32
	vx        f32
	vy        f32
	gravity   f32
	radius    f32
	
	Mode      i32
	GridPos   app.Vec2I
	// cell bounds/connections 
	CellMin   app.Vec2 // boundaries of the current cell it's in 
	CellMax   app.Vec2 // ^ 
	//Room    map.CarvedRoom // CAN'T FIGURE OUT WHY THIS MAKES AVATAR DISAPPEAR 
	ExitNorth bool
	ExitSouth bool
	ExitEast  bool
	ExitWest  bool
}

var ball Entity
var All  []Entity // all entities (except ball ATM: FIXME) 



func Init () {
	str.print("entities.Init ()")
}


// each app/game probably has a few unique entities that are 
// special cases, & updated uniquely at app level 
// (such as player objects, which might be the current falling 
// piece/shape in CXtris, or the player paddles/buckets in
// SkyBOOM). 
// SkyBOOM's coin dropper is another example. 
// the rest can be handle generically, moving around based on 
// their current velocity. 
func Update (numUniques i32) {
	//str.print("entities.Update ()")

	// velocity 
	//		player desired 
	mov.SetPlayerVelocityFromInput()
	
	// motion/position 
	//		hardwired player (FIXME) 
	ball.x = f32.add(ball.x, ball.vx * time.Delta)
	ball.y = f32.add(ball.y, ball.vy * time.Delta)
	//		all the rest 
	for i := numUniques; i < len(All); i++ {
		UpdateAt(i)
	}

	// back out of any penetration (FIXME for "All") 
	mov.ConstrainPosByMap()
}


func InitPlayer () {
	ball = Entity{
		radius:  0.05,
		x:       0.0,
		y:       0.0,
		vx:      0.0,
		vy:      0.0,
		gravity: 0.01}
}


func GetNumOfAll () (num i32) {
	num = len(All)
}


func UpdateAt (i i32) {
	All[i].x = f32.add(All[i].x, All[i].vx * time.Delta)
	All[i].y = f32.add(All[i].y, All[i].vy * time.Delta)
}
