package ccInput

import "app"
import "mesh"



func doPrimaryAbility () {
	str.print("doPrimaryAbility ()")
	
	var touchedMenuItem bool
	var i i32
	touchedMenuItem, i = getTouchedMenuItem(MousePointer)
	
	if touchedMenuItem {
		respondToItem(i)
	} else {
		doValidGridSpacePrimary()
	}
}


func respondToItem (i i32) () {
	printf("pressed menu item %s \n", Menus[EDIT_TOOLBAR].Items[i].Name)
	
	if i < app.EDITMODE_MAX { // change EditMode
		app.EditMode = i
		printEditMode()
		wipePickedVerts()
	} else { // perform one-time actions 
		if i == TOOLBAR_GEN_FUNC {
			//mesh.GenerateMeshInitFunc("Char") //"Icon")
		} else
		if i == TOOLBAR_SNAP_TO_GRID {
			SnapToGrid = !SnapToGrid
			
			if SnapToGrid {
				str.print("SNAP_TO_GRID: ON")					
			} else {
				str.print("SNAP_TO_GRID: OFF")
			}
		} else
		if i == TOOLBAR_WIPE_LAYER {
			str.print("-> WIPE_LAYER")
			
			wipePickedVerts()
			
			var m Mesh2D 
			m = Mesh2D{}
			mesh.EditLayers[mesh.CurrLayer] = m
		} else
		if i == TOOLBAR_MAINMENU {
			str.print("-> MAINMENU ---------(or WILL take us to main menu when it's implemented)")
			entity.SetupHero()
			app.Mode = app.APPMODE_PLAYING // FIXME: LATER want app.APPMODE_MENU
		}
	}
}


func wipePickedVerts () () {
	var cleanSlate []i32
	cleanSlate = []i32{}
	mesh.PickedVerts = cleanSlate
}


func printEditMode () () {
	if app.EditMode == app.EDITMODE_VERTICES {
		str.print("------> EDITMODE_VERTICES")
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		str.print("------> EDITMODE_TRIANGLES")
	} else
	if app.EditMode == app.EDITMODE_COLORS {
		str.print("------> EDITMODE_COLORS")
	} else
	if app.EditMode == app.EDITMODE_MESH_PICKER {
		str.print("------> EDITMODE_MESH_PICKER")
	}
}


func doValidGridSpacePrimary () () {
	Dragging = true
	DragStart = MousePointer

	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(MousePointer)

	if app.EditMode == app.EDITMODE_VERTICES ||
		app.EditMode == app.EDITMODE_TRIANGLES {
		
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS // 
			setPickedStatus(vertId, true)
		} else {
			wipePickedVerts()
		}
	}
}


func doValidGridSpaceSecondary () {
	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(MousePointer)

	if app.EditMode == app.EDITMODE_VERTICES {
		if !touchedVert {
			addNewVertexNode()
		}
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS //	
			setPickedStatus(vertId, true)
		} else { 
			setPickedStatus(len(mesh.EditLayers[mesh.CurrLayer].Points), false)
			addNewVertexNode()
		}

		if i32.gteq(len(mesh.PickedVerts), 3) {
			str.print("mesh.AddNewTriangleInEditor()")
			//wipePickedVerts()
		}
	}
}


func setPickedStatus (id i32, deselectWanted bool) () {
	var alreadyPicked bool
	
	for j := 0; j < len(mesh.PickedVerts); j++ {
		if id == mesh.PickedVerts[j] {
			alreadyPicked = true
		}
	}

	printf("setPickedStatus () ") // no \n wanted 
	if alreadyPicked {
		if deselectWanted {
			deselectVertex(id)
			printf("deselected id: %d \n", id)
		} else {
			printf("ignoring ALREADY PICKED id: %d \n", id)
		}
	} else {
		mesh.PickedVerts = append(
		mesh.PickedVerts, id)
		
		printf("selected id: %d \n", id)
	}
}


func deselectVertex (id i32) () {
	var newPicks []i32
	newPicks = []i32{}
	
	for j := 0; j < len(mesh.PickedVerts); j++ {
		if id != mesh.PickedVerts[j] {
			newPicks = append(
			newPicks, mesh.PickedVerts[j])
		}
	}
	
	mesh.PickedVerts = newPicks
}


func addNewVertexNode () () {
	str.print("addNewVertexNode ()")

	if MousePointer.X >= -1.0 && // ...when within grid 
		MousePointer.X <= 1.0 &&
		MousePointer.Y >= -1.0 &&
		MousePointer.Y <= 1.0 {
		
		var c Color3
		c = Color3{ 
			R: 0.5, 
			G: 0.5, 
			B: 0.5 }
			
		var m Mesh2D
		m = mesh.EditLayers[mesh.CurrLayer]

		printf("+ vertex: %d - in layer: %d \n", len(m.Points), mesh.CurrLayer)

		m.Colors = append(
		m.Colors, c)
		m.Points = append(
		m.Points, MousePointer)

		mesh.EditLayers[mesh.CurrLayer] = m
	}
}


func pickAllVertsInDragBox () {		
	var num i32
	num = len(mesh.EditLayers[mesh.CurrLayer].Points)
	
	for j := 0; j < num; j++ {
		var v Vec2
		v = mesh.EditLayers[mesh.CurrLayer].Points[j]

		// start & end points of the final box 
		var sX f32
		var sY f32
		var eX f32
		var eY f32

		sX = f32.sub(DragStart.X,    v.X)
		sY = f32.sub(DragStart.Y,    v.Y)
		eX = f32.sub(MousePointer.X, v.X)
		eY = f32.sub(MousePointer.Y, v.Y)
	
		if sX > 0.0 && eX > 0.0 {
			continue
		}
	
		if sX < 0.0 && eX < 0.0 {
			continue
		}
	
		if sY > 0.0 && eY > 0.0 {
			continue
		}
	
		if sY < 0.0 && eY < 0.0 {
			continue
		}
		
		setPickedStatus(j, false)
	}
}
