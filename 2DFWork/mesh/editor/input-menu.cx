package ccInput

import "app"



type MenuItem struct {
	Name             str // just for console text feedback 
	Pos              Vec2
	Extents          Vec2	
	// mesh ids unnecessary? 
	// if not, set these to ids in the mesh.___Meshes (slices) 
	BakedBackground  i32
	BakedIcon        i32
	MeshForHoverText i32
}

type Menu struct {
	Name  str
	Items []MenuItem
}

// menu ids 
var EDIT_TOOLBAR i32 = 0
var MESH_PICKER  i32 = 1

var Menus       []Menu
var ButtonSpan  f32 = 0.2

// toolbar 
// (Menu item button ids... 
// 1st correspond to switching editor modes, then... 
// 2nd, these one-time actions) 
var TOOLBAR_GEN_FUNC     i32 = app.EDITMODE_MAX // generate mesh init func 
var TOOLBAR_SNAP_TO_GRID i32 = app.EDITMODE_MAX + 1
var TOOLBAR_WIPE_LAYER   i32 = app.EDITMODE_MAX + 2
var TOOLBAR_MAINMENU     i32 = app.EDITMODE_MAX + 3



func SetupMenu (/* menu */ id i32, numItems i32) () {
	// append to menus until menu id exists 
	for id >= len(Menus) {
		var m Menu
		m = Menu{}
		
		Menus = append(
		Menus, m)
	}

	// setup in right slot 
	for i := 0; i < len(Menus); i++ {
		if i == id {
			if 0 == len(Menus[id].Items) {
				var mi MenuItem
				for j := 0; j < numItems; j++ {
					mi = MenuItem{ BakedBackground: app.I32_MAX, Name: "common init string" }
					Menus[id].Items = append(
					Menus[id].Items, mi)
					str.print("+ menu item")
				}
			}
		}
	}


	/*
		// editor toolbar 
		////// might use .Name as prefix to the hover-text of the button 
		////// ("edit " + "colors/vertices" for example) 
		Menus[id].Name = "Edit" 

		"Edit Vertices"
		"Edit Triangles"
		"Edit Colors"
		"Mesh Picker"
		"Gen Init Func"
		"Snap-To-Grid"
		"Wipe Layer"
		"PLAY"
	*/
}