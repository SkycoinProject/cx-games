package mesh

import "glfw"

import "app"



func editorInit () {
	str.print("    editorInit ()")

	tBars = []Menu{} // prep all tBars 
	InitToolBar(TOOLBAR_EDIT, 8) // just 1 

	// canvas 
	var m Mesh2D
	m = Mesh2D{ Name: "Editor workspace" }
	EditLayers = append(
	EditLayers, m)
	
	// vertex pick/selection 
	PickedVerts = []i32{}
}


/*
// mouse position 
var oldX f32
var oldY f32
var deltaX f32
var deltaY f32
func onCursorPosEvent (window str, x f64, y f64) () {
	oldX = MousePointer.X
	oldY = MousePointer.Y
	
	var mX f32
	mX = f32.div(f64.f32(x), i32.f32(app.ScreenSizeInPixels.X))
	mX = f32.mul(mX, f32.mul(f64.f32(collision.ScreenEdgeR), 2.0))
	MousePointer.X = f32.add(f64.f32(collision.ScreenEdgeL), mX)

	var mY f32
	mY = f32.div(f64.f32(y), i32.f32(app.ScreenSizeInPixels.Y))
	mY = f32.mul(mY, 2.0)
	MousePointer.Y = f32.sub(1.0, mY)
	
	deltaX = f32.sub(MousePointer.X, oldX)
	deltaY = f32.sub(MousePointer.Y, oldY)
	
	if Dragging {
		//mesh.EditLayers[draggedLayerId].Points[draggedVertexId].X = MousePointer.X
		//mesh.EditLayers[draggedLayerId].Points[draggedVertexId].Y = MousePointer.Y
		
		for j := 0; j < len(mesh.PickedVerts); j++ {
			var v i32
			v = mesh.PickedVerts[j]
			mesh.EditLayers[mesh.CurrLayer].Points[v].X = f32.add(
			mesh.EditLayers[mesh.CurrLayer].Points[v].X, deltaX)
			mesh.EditLayers[mesh.CurrLayer].Points[v].Y = f32.add(
			mesh.EditLayers[mesh.CurrLayer].Points[v].Y, deltaY)
		}
	}
	
	//printf("onCursorPosEvent %f, %f \n", MousePointer.X, MousePointer.Y)
}


// keys 
func onKeyEvent (window str, key i32, scancode i32, action i32, mods i32) () {
	// action == 0, release 
	// action == 1, press 
	// action == 2, is an autorepeat event, generated by keys that are held longer than a second

	if action != 2 { // (not a repeat) 
		if action == 1 { // (press) 
			//str.print("-------------------------------------PRESS (not a repeat)")

			//if key == 50 { // GLFW_KEY_2 
			//} else
			//if key == 51 { // GLFW_KEY_3 
			//} else
			if Back(key) {
				app.Mode = app.APPMODE_EDITOR
			} else
			if key == 53 { // GLFW_KEY_5 
				// close 
				str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ QUITTING GAME ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
				glfw.SetShouldClose("window", true)
			} else
			if key == GLFW_KEY_SPACE {
				DoPrimaryAction()
			}

			//maybeToggleMousePointer(key)
		}
	}
}


var wantMousePointer bool
func maybeToggleMousePointer (key i32) () {
	i32.print(key)

	if Back(key) ||
		key == 257 || // GLFW_KEY_ENTER
		key == 258 || // GLFW_KEY_TAB 
		key == 259 { // GLFW_KEY_BACKSPACE 

		str.print("DEF go to main menu")
		wantMousePointer = !wantMousePointer

		if bool.eq(wantMousePointer, true) {
			str.print("wantMousePointer TRUE")
			glfw.SetInputMode("window", glfw.Cursor, glfw.CursorNormal)
		} else {
			str.print("wantMousePointer FALSE")
			glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
		}
	}
}
*/
