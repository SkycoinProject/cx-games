package mesh

import "app"
import "inputs"



var SnapToGrid      bool
var Dragging        bool
var DragStart       Vec2
var draggedLayerId  i32 // these 2 ids were when we could only drag 1... 
var draggedVertexId i32 // ...vert at a time.  probably useless now 

var PickedVerts     []i32
	


func doPrimaryAbility () {
	str.print("doPrimaryAbility ()")
	
	var touchedMenuItem bool
	var i i32
	touchedMenuItem, i = getTouchedMenuItem(inputs.MousePointer)
	
	if touchedMenuItem {
		respondToItem(i)
	} else {
		doValidGridSpacePrimary()
	}
}


func respondToItem (i i32) {
	printf("pressed menu item %s \n", tBars[EDIT_TOOLBAR].Items[i].Name)
	
	if i < app.EDITMODE_MAX { // change EditMode
		app.EditMode = i
		printEditMode()
		wipePickedVerts()
	}else{ // perform one-time actions 
		if i == TOOLITEM_GEN_FUNC {
			GenerateMeshInitFunc ("Icon")
		}else
		if i == TOOLITEM_SNAP_TO_GRID {
			SnapToGrid = !SnapToGrid
			
			if SnapToGrid {
				str.print("SNAP_TO_GRID: ON")					
			} else {
				str.print("SNAP_TO_GRID: OFF")
			}
		}else
		if i == TOOLITEM_WIPE_LAYER {
			str.print("-> WIPE_LAYER")
			
			wipePickedVerts()
			
			var m Mesh2D 
			m = Mesh2D{}
			EditLayers[CurrLayer] = m
		}else
		if i == TOOLITEM_MAINMENU {
			str.print("-> MAINMENU ---------(or WILL take us to main menu when it's implemented)")
			app.Mode = app.MODE_PLAYING
		}
	}
}


func wipePickedVerts () () {
	var cleanSlate []i32
	cleanSlate = []i32{}
	PickedVerts = cleanSlate
}


func printEditMode () () {
	if app.EditMode == app.EDITMODE_VERTICES {
		str.print("------> EDITMODE_VERTICES")
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		str.print("------> EDITMODE_TRIANGLES")
	} else
	if app.EditMode == app.EDITMODE_COLORS {
		str.print("------> EDITMODE_COLORS")
	} else
	if app.EditMode == app.EDITMODE_MESH_PICKER {
		str.print("------> EDITMODE_MESH_PICKER")
	}
}


func doValidGridSpacePrimary () {
	Dragging = true
	DragStart = inputs.MousePointer

	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(inputs.MousePointer)

	if  app.EditMode == app.EDITMODE_VERTICES ||
		app.EditMode == app.EDITMODE_TRIANGLES {
		
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS // 
			setPickedStatus(vertId, true)
		} else {
			wipePickedVerts()
		}
	}
}


func doValidGridSpaceSecondary () {
	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(inputs.MousePointer)

	if app.EditMode == app.EDITMODE_VERTICES {
		if !touchedVert {
			addNewVertexNode()
		}
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS //	
			setPickedStatus(vertId, true)
		} else { 
			setPickedStatus(len(EditLayers[CurrLayer].Points), false)
			addNewVertexNode()
		}

		if i32.gteq(len(PickedVerts), 3) {
			str.print("RE-ENABLE   AddNewTriangleInEditor()")
			str.print("RE-ENABLE   wipePickedVerts()")
		}
	}
}
