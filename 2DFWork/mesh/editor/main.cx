package mesh

import "app"
import "inputs"



var SnapToGrid      bool
var Dragging        bool
var DragStart       Vec2
var draggedLayerId  i32 // these 2 ids were when we could only drag 1... 
var draggedVertexId i32 // ...vert at a time.  probably useless now 

var PickedVerts     []i32
	




func DoPrimaryAction () {
	//str.print("doPrimaryAction ()")
	var mode i32
	var pos  Vec2
	var vel  Vec2
	var ext  Vec2
	
	// handle modes 
	if app.Mode == app.MODE_EDITOR {
		doPrimaryAbility()
	}
}


func doPrimaryAbility () {
	str.print("doPrimaryAbility ()")
	
	var touchedMenuItem bool
	var i i32
	touchedMenuItem, i = getTouchedToolbarItem(inputs.MousePointer)
	
	if touchedMenuItem {
		respondToItem(i)
	} else {
		doValidGridSpacePrimary()
	}
}


func DoSecondaryOrTertiaryAction(button i32) {
	if app.Mode == app.MODE_EDITOR &&
		app.EditMode == app.EDITMODE_VERTICES ||
		app.EditMode == app.EDITMODE_TRIANGLES {
			
		var touchedVert bool
		var lId i32 // layer id 
		var i i32
		touchedVert, lId, i = getTouchedVertexNode(inputs.MousePointer)
		
		if button == 1 {
			str.print("RMB press && EDITMODE_VERTICES")
			doValidGridSpaceSecondary()
		} else
		if button == 2 {
			str.print("MMB press && EDITMODE_VERTICES")
			
			if touchedVert {			
				str.print("mesh.DeleteVertexNode(lId, i)")
			}
		}
	}
}


func wipePickedVerts () () {
	var cleanSlate []i32
	cleanSlate = []i32{}
	PickedVerts = cleanSlate
}


func printEditMode () () {
	if app.EditMode == app.EDITMODE_VERTICES {
		str.print("------> EDITMODE_VERTICES")
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		str.print("------> EDITMODE_TRIANGLES")
	} else
	if app.EditMode == app.EDITMODE_COLORS {
		str.print("------> EDITMODE_COLORS")
	} else
	if app.EditMode == app.EDITMODE_MESH_PICKER {
		str.print("------> EDITMODE_MESH_PICKER")
	}
}


func doValidGridSpacePrimary () {
	Dragging = true
	DragStart = inputs.MousePointer

	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(inputs.MousePointer)

	if  app.EditMode == app.EDITMODE_VERTICES ||
		app.EditMode == app.EDITMODE_TRIANGLES {
		
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS // 
			setPickedStatus(vertId, true)
		} else {
			wipePickedVerts()
		}
	}
}


func doValidGridSpaceSecondary () {
	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(inputs.MousePointer)

	if app.EditMode == app.EDITMODE_VERTICES {
		if !touchedVert {
			addNewVertexNode()
		}
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		if touchedVert { // BOTH PRIMARY & SECONDARY ACTIONS DO THIS //	
			setPickedStatus(vertId, true)
		} else { 
			setPickedStatus(len(EditLayers[CurrLayer].Points), false)
			addNewVertexNode()
		}

		if i32.gteq(len(PickedVerts), 3) {
			str.print("RE-ENABLE   AddNewTriangleInEditor()")
			str.print("RE-ENABLE   wipePickedVerts()")
		}
	}
}
