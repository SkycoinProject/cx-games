package mesh



var VertNodeExtent f32 = 0.01



func DeleteVertexNode (layerId i32, ir i32) { // id (to) remove 
	if app.Mode != app.MODE_EDITOR {		
		return
	}
	
	printf("mesh.DeleteVertexNode(%d) \n", ir)

	var m Mesh2D
	m = Mesh2D{ Name: EditLayers[layerId].Name }
	
	for i := 0; i32.lt(i, len(EditLayers[layerId].Points)); i++ {
		if i32.uneq(i, ir) {
			m.Colors = append(
			m.Colors, EditLayers[layerId].Colors[i])
			m.Points = append(
			m.Points, EditLayers[layerId].Points[i])
		}
	}

	// remove tris that point to "ir" 
	// (handle 3 verts at a time (+=3 increment), "j" being the latest) 
	for j := 2; i32.lt(j, len(EditLayers[layerId].TriangleIndices)); j = i32.add(j, 3) {
		var j0 i32
		var j1 i32
		var j2 i32
		
		j0 = i32.sub(j, 2)
		j1 = i32.sub(j, 1)
		j2 = j
		
		j0 = EditLayers[layerId].TriangleIndices[j0]
		j1 = EditLayers[layerId].TriangleIndices[j1]
		j2 = EditLayers[layerId].TriangleIndices[j2]
		
		// if tri will remain, copy it 
		if bool.and(bool.and(
			i32.uneq(j0, ir), 
			i32.uneq(j1, ir)), 
			i32.uneq(j2, ir)) {

			m.TriangleIndices = append(
			m.TriangleIndices, j0)
			m.TriangleIndices = append(
			m.TriangleIndices, j1)
			m.TriangleIndices = append(
			m.TriangleIndices, j2)
			
			str.print("SAVING TRIANGLE")
		} else {
			str.print("DELETED TRIANGLE")
		}		
	}

	// - vert ids that are > "ir" 
	for l := 0; i32.lt(l, len(m.TriangleIndices)); l++ {
		var currVert i32
		currVert = m.TriangleIndices[l]
		m.TriangleIndices[l] = getValidId(ir, currVert)
	}

	//	var num i32 // last index for printing out positions (CRASHES CUZ 0 GIVES -1 INDEX) 
	//	num = i32.sub(len(m.Points), 1)
	//	printf("---num: %d \n", num)
	//	printf("---len(m.Colors): %d \n", len(m.Colors))
	//	printf("---len(m.Points): %d \n", len(m.Points))
	//	printf("---m.Points[num].X: %f \n", m.Points[num].X)
	//	printf("---m.Points[num].Y: %f \n", m.Points[num].Y)
	//	printf("---len(m.TriangleIndices): %d \n", len(m.TriangleIndices))
	//	
	//	num = i32.sub(len(EditLayers[layerId].Points), 1)
	//	printf("\n---num: %d \n", num)
	//	printf("---len(EditLayers[layerId].Colors): %d \n", len(EditLayers[layerId].Colors))
	//	printf("---len(EditLayers[layerId].Points): %d \n", len(EditLayers[layerId].Points))
	//	printf("---EditLayers[layerId].Points[num].X: %f \n", EditLayers[layerId].Points[num].X)
	//	printf("---EditLayers[layerId].Points[num].Y: %f \n", EditLayers[layerId].Points[num].Y)
	//	printf("---len(EditLayers[layerId].TriangleIndices): %d \n", len(EditLayers[layerId].TriangleIndices))
	
	EditLayers[layerId] = m
}


func getValidId (trashVert i32, currVert i32) (out i32) {
	printf("getValidId () - trashVert: %d - currVert: %d \n", trashVert, currVert)
	
	// decrease vertex id by 1, if it's after removed index 
	if i32.lt(trashVert, currVert) {
		out = i32.sub(currVert, 1)
		printf("getValidId () - out: %d \n", out)
	} else {
		out = currVert
	}
}


func getTouchedVertexNode (p Vec2) (touched bool, layId i32, vertId i32) {
	str.print("getTouchedVertexNode()")
	touched = false
	
	for    li := 0; li < len(EditLayers);           li++ {
		for i := 0;  i < len(EditLayers[li].Points); i++ {
			var v Vec2
			v = EditLayers[li].Points[i]
			
			if space.PointInBox(p, v, VertNodeExtent, VertNodeExtent) {			
				touched = true
				layId = li			
				vertId = i			
				break /////////////////////////////////////////
			}
		}
	}
}


func setPickedStatus (id i32, deselectWanted bool) () {
	var alreadyPicked bool
	
	for j := 0; j < len(PickedVerts); j++ {
		if id == PickedVerts[j] {
			alreadyPicked = true
		}
	}

	printf("setPickedStatus () ") // no \n wanted 
	if alreadyPicked {
		if deselectWanted {
			deselectVertex(id)
			printf("deselected id: %d \n", id)
		} else {
			printf("ignoring ALREADY PICKED id: %d \n", id)
		}
	} else {
		PickedVerts = append(
		PickedVerts, id)
		
		printf("selected id: %d \n", id)
	}
}


func deselectVertex (id i32) () {
	var newPicks []i32
	newPicks = []i32{}
	
	for j := 0; j < len(PickedVerts); j++ {
		if id != PickedVerts[j] {
			newPicks = append(
			newPicks, PickedVerts[j])
		}
	}
	
	PickedVerts = newPicks
}


func addNewVertexNode () () {
	str.print("addNewVertexNode ()")

	var negEdge f32 = -1.0
	var mouX f32 = inputs.MousePointer.X
	var mouY f32 = inputs.MousePointer.Y
	if  (mouX >= negEdge) && // (within grid) 
		(mouX <= 1.0) &&
		(mouY >= negEdge) &&
		(mouY <= 1.0) {
		
		var c Color3
		c = Color3{ 
			R: 0.5, 
			G: 0.5, 
			B: 0.5 }
			
		var m Mesh2D
		m = EditLayers[CurrLayer]

		printf("+ vertex: %d - in layer: %d \n", len(m.Points), CurrLayer)

		m.Colors = append(
		m.Colors, c)
		m.Points = append(
		m.Points, inputs.MousePointer)

		EditLayers[CurrLayer] = m
	}
}


func PickAllVertsInDragBox () {		
	var num i32
	num = len(EditLayers[CurrLayer].Points)
	
	for j := 0; j < num; j++ {
		var v Vec2
		v = EditLayers[CurrLayer].Points[j]

		// start & end points of the final box 
		var sX f32
		var sY f32
		var eX f32
		var eY f32

		sX = f32.sub(DragStart.X,    v.X)
		sY = f32.sub(DragStart.Y,    v.Y)
		eX = f32.sub(inputs.MousePointer.X, v.X)
		eY = f32.sub(inputs.MousePointer.Y, v.Y)
	
		if sX > 0.0 && eX > 0.0 {
			continue
		}
	
		if sX < 0.0 && eX < 0.0 {
			continue
		}
	
		if sY > 0.0 && eY > 0.0 {
			continue
		}
	
		if sY < 0.0 && eY < 0.0 {
			continue
		}
		
		setPickedStatus(j, false)
	}
}
