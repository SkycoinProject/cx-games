package mesh



func AddNewTriangleInEditor () { // just tri indices to existing global (ATM) EditorMesh 
	str.print("mesh.AddNewTriangleInEditor () --- (the 1st 3 PickedVerts)")
	
	
	// feedback BEFORE 
	printf("PickedVerts[0]: %d \n", PickedVerts[0])
	printf("PickedVerts[1]: %d \n", PickedVerts[1])
	printf("PickedVerts[2]: %d \n", PickedVerts[2])
	
	var numIds i32
	numIds = len(EditLayers[CurrLayer].TriangleIndices)
	printf("numIds BEFORE: %d \n", numIds)
	
	var numErrs i32 // erroneous leftover indices (indicating not a multiple of 3) 
	var numTris i32
	numTris = i32.div(numIds, 3)
	numErrs = i32.mod(numIds, 3)
	printf("numTris BEFORE: %d \n", numTris)
	
	
	// MEAT of func 
	EditLayers[CurrLayer].TriangleIndices = append(
	EditLayers[CurrLayer].TriangleIndices, PickedVerts[0])
	EditLayers[CurrLayer].TriangleIndices = append(
	EditLayers[CurrLayer].TriangleIndices, PickedVerts[1])
	EditLayers[CurrLayer].TriangleIndices = append(
	EditLayers[CurrLayer].TriangleIndices, PickedVerts[2])


	// feedback AFTER 
	numIds  = len(EditLayers[CurrLayer].TriangleIndices)
	numTris = i32.div(numIds, 3)
	numErrs = i32.mod(numIds, 3) // num/how-many erroneous/leftover 
	printf("numIds AFTER: %d \n", numIds)
	printf("numTris AFTER: %d \n", numTris)
	
	if i32.uneq(numErrs, 0) {
		printf("********* ERROR! numErrs: %d \n", numErrs)
		printf("********* ERROR! numErrs: %d \n", numErrs)
		printf("********* ERROR! numErrs: %d \n", numErrs)
	}

	printf("EditLayers[CurrLayer].Points len: %d \n", len(EditLayers[0].Points))
}


