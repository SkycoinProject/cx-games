package mesh

import "gl"

import "app"
import "draw"


var currX           f32
var span            f32

// single color channel intensities 
var currGreen       f32 // component of terrain fill color 
var minCI           f32 = 0.0
var darkCI          f32 = 0.12
var maxCI           f32 = 1.0
var pickR           f32 = 1.0 // picked/selected red channel 
var pickG           f32 = 0.6 // picked/selected green channel 

// blink timing 
var pickedNodesAreBright bool
var timeLocalToDraw      f32
var nextBlinkFlip        f32
var blinkDelay           f32 =  0.1



func DrawEditorMaybe (currTime f32, deltaTime f32) {
	//str.print("mesh.DrawEditorMaybe ()")

	blinkTiming(deltaTime)

	if app.Mode == app.MODE_EDITOR {		
		if  app.EditMode != app.EDITMODE_COLORS &&
			app.EditMode != app.EDITMODE_MESH_PICKER {
			
			gl.Begin(gl.LINES)
				gridLines()
			gl.End()
		}

		gl.Begin(gl.TRIANGLES) //////////////
			if app.EditMode == app.EDITMODE_COLORS {
				//trianglesForOne(RawMeshes, ColorWheel)
			}else 
			if true == true { //app.EditMode == app.EDITMODE_MESH_PICKER {
				//trianglesForMenu(BakedUIMeshes, ccInput.MESH_PICKER)
			}else{
				//trianglesForAll(EditLayers)
			}			
			
			//trianglesForMenu(BakedUIMeshes, ccInput.EDIT_TOOLBAR)
		gl.End()

		if  app.EditMode != app.EDITMODE_COLORS &&
			app.EditMode != app.EDITMODE_MESH_PICKER {
			
			gl.Begin(gl.QUADS) //////////////////
				//editorQuads()
			gl.End()
			
			gl.Begin(gl.LINES)
				//maybeDragBox()				
			gl.End()
		}
		
		// TODO: ADAPT THIS TO HIGHLIGHT MULTIPLE MESHES/SEPARATIONS WHEN IMPLEMENTED 
		// 		(THIS WILL ALLOW SHARED VERTEX COORDS WITH DIFFERENT COLORS SO
		// 		THERE CAN BE HARD COLOR CONTRAST BETWEEN MESHES THAT APPEAR CONNECTED) 
				
		// // draws loop from all entity positions 
		// gl.Begin(gl.LINE_LOOP) //////////////
		// 	simpleVertexSequence(0.5)
		// gl.End()
	}else{ // playing (& the rest) 
		//gl.Begin(gl.QUADS) //////////////////	
			//EntitiesBox()
		//gl.End()
		
		gl.Begin(gl.TRIANGLES)
			//EntitiesMesh()
			trianglesForOne(RawMeshes, 0)
			
			if app.Mode == app.MODE_GAME_OVER {
				//trianglesForOne(RawMeshes, GameOver)
			}
		gl.End()
	}
}


func blinkTiming(deltaTime f32) {
	timeLocalToDraw = f32.add(timeLocalToDraw, deltaTime)	
	for f32.lteq(nextBlinkFlip, timeLocalToDraw) {
		nextBlinkFlip = f32.add(timeLocalToDraw, blinkDelay)
		pickedNodesAreBright = bool.not(pickedNodesAreBright)
	}
}


/*
func maybeDragBox() {
	if ccInput.Dragging { //&&
		//app.EditMode != app.EDITMODE_TRIANGLES {
		
		if pickedNodesAreBright {
			gl.Color3f(pickR, pickG, minCI)
		} else {
			gl.Color3f(darkCI, darkCI, darkCI) // gray 
		}
		
		// horizontal lines 
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.DragStart.Y)
		
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.MousePointer.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.MousePointer.Y)
		
		// vertical lines 
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.DragStart.X,    ccInput.MousePointer.Y)
		
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.DragStart.Y)
		gl.Vertex2f(ccInput.MousePointer.X, ccInput.MousePointer.Y)
	}
}


func trianglesForAll (meshes []Mesh2D) () {
	for i := 0; i32.lt(i, len(meshes)); i++ {
		trianglesForOne(meshes, i)
	}
}


func trianglesForMenu (meshes []Mesh2D, menuId i32) () {
	if menuId != 0 {
		printf("trianglesForMenu() menuId: %d \n", menuId)
	}
	
	for j := 0; i32.lt(j, len(ccInput.Menus[menuId].Items)); j++ {
		var bi i32 // baked mesh id 
		bi = ccInput.Menus[menuId].Items[j].BakedBackground
		
		// background 
		if bi != app.I32_MAX {
			trianglesForOne(meshes, bi)
		}
		
		// icon 
		bi = ccInput.Menus[menuId].Items[j].BakedIcon
		trianglesForOne(meshes, bi)
	}
}
*/

func trianglesForOne (meshes []Mesh2D, i i32) {
	//printf("trianglesForOne () id of given []Mesh2D: %d \n", i)
	
	var m Mesh2D
	m = meshes[i]

	ReportBadTriCount("trianglesForOne", len(m.TriangleIndices))

	for j := 0; i32.lt(j, len(m.TriangleIndices)); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		gl.Color3f(c.R, c.G, c.B)
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(v.X, v.Y)
	}
}


/*
func trianglesForOneWithPos (meshes []Mesh2D, i i32, pos Vec2) () {
	//str.print("trianglesForOneWithPos ()")
	
	var m Mesh2D
	m = meshes[i]

	ReportBadTriCount("trianglesForOneWithPos", len(m.TriangleIndices))

	for j := 0; i32.lt(j, len(m.TriangleIndices)); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		//gl.Color3f(c.R, c.G, c.B)
		//gl.Color3f(maxCI, maxCI, maxCI)		
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(pos.X + v.X,   pos.Y + v.Y)
	}
}


func simpleVertexSequence (colorChanIntensity f32) () {
	gl.Color3f(colorChanIntensity, colorChanIntensity, colorChanIntensity)

	var i i32
	for i = 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]

		gl.Vertex2f(e.Pos.X, e.Pos.Y)
	}
}
*/

func gridLines () {
	var l f32
	l = -1.0
	
	var r f32
	r = 1.0
	
	numLines := 20
	var unitSpan f32
	unitSpan = f32.mul(r, 2.0)
	unitSpan = f32.div(unitSpan, i32.f32(numLines))
	z := 0.2

	// vertical 
	var fx f32
	fx = l
	for x := 0; x <= numLines; x++ {
		setColor(x)		
		gl.Vertex3f(fx, l, z)
		gl.Vertex3f(fx, r, z)
		
		fx = f32.add(fx, unitSpan)
	}
	
	// horizontal 
	var fy f32
	fy = l
	for y := 0; y <= numLines; y++ {
		setColor(y)		
		gl.Vertex3f(l, fy, z)
		gl.Vertex3f(r, fy, z)
		
		fy = f32.add(fy, unitSpan)
	}
}


var othCol f32 = darkCI / 3.0
func setColor (i i32) {	
	if i % 4 == 0 {
		gl.Color3f(darkCI, darkCI, darkCI)
	} else {
		gl.Color3f(othCol, othCol, othCol)
	}
}


/*
func editorQuads () () {
	var li i32
	for li = 0; i32.lt(li, len(EditLayers)); li++ {
		var cols []Color3
		cols = EditLayers[li].Colors
		
		for i := 0; i32.lt(i, len(cols)); i++ {
			//gl.Color3f(cols[i].R, cols[i].G, cols[i].B)  TODO: oscillate between this and black?  or just blink to halfway in between? 
			gl.Color3f(darkCI, darkCI, darkCI)

			if pickedNodesAreBright {
				for j := 0; j < len(PickedVerts); j++ {
					if i == PickedVerts[j] {
						gl.Color3f(pickR, pickG, minCI)
					}
				}
			}
			
			drawRect(EditLayers[li].Points[i], entity.NodeExtents)
		}
	}
}


func EntitiesBox () () {
	for i := 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]
		
		//        ______==___________________
		if i32.eq(e.Mode, entity.ENTMODE_DEAD) {
			printf("skip DEAD %d     ", i)
			//continue
		} else {		
			// colors 
			if e.Type == entity.TYPE_HERO {
				c := 0.4
				gl.Color3f(c, c, c)
			}else
			if e.Type == entity.TYPE_BULLET {
				gl.Color3f(1.0, 1.0, 0.0)
			}else
			if e.Type == entity.TYPE_ROCKET {
				gl.Color3f(1.0, 0.5, 0.0)
			}
		
			drawRect(e.Pos, e.Extents)
		}
	}
}


func EntitiesMesh () () {
	for i := 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]
		
		//        ______==___________________
		if i32.eq(e.Mode, entity.ENTMODE_DEAD) {
			printf("skip DEAD %d     ", i)
			//continue
		} else {		
			// colors 
			if e.Type == entity.TYPE_HERO {
				c := 0.4
				gl.Color3f(c, c, c)
			}else
			if e.Type == entity.TYPE_BULLET {
				gl.Color3f(1.0, 1.0, 0.0)
			}else
			if e.Type == entity.TYPE_ROCKET {
				gl.Color3f(1.0, 0.5, 0.0)
			}
		
			trianglesForOneWithPos(SizedMeshes, e.Type, e.Pos)
		}
	}
}


func getRandomForColorChannel () (out f32) {
	// 257, cuz without the +1 it can never reach value of 1.0 
	var colSpan f32
	colSpan = f32.div(1.0, 257.0)
	
	var f f32
	f = i32.f32(i32.rand(0, 257))
	
	out = f32.mul(f, colSpan)
}
*/
