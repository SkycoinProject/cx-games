package mesh

import "gl"
import "gltext"

import "app"
import "draw"
import "mesh"
import "time"


// single color channel intensities 
var minCI           f32 = 0.0
var darkCI          f32 = 0.2
var maxCI           f32 = 1.0
var pickR           f32 = 1.0 // picked/selected red channel 
var pickG           f32 = 0.6 // picked/selected green channel 

// blink timing 
var pickedNodesAreBright bool
var timeLocalToDraw      f32
var nextBlinkFlip        f32
var blinkDelay           f32 =  0.1



func DrawEditor () {
	//str.print("mesh.DrawEditor ()")

	pre()
	
	gl.Begin(gl.TRIANGLES)
		if app.EditMode == app.EDITMODE_VERTICES {
			trianglesForAll(EditLayers)
			//trianglesForOneWithPos(SizedMeshes, e.Type, e.Pos)
		}else
		if app.EditMode == app.EDITMODE_TRIANGLES {
			trianglesForAll(EditLayers)
		}else
		if app.EditMode == app.EDITMODE_COLORS {
			trianglesForOne(RawMeshes, ColorWheel)
		}
		
		
		// toolbar (or BOTH toolbars, of the 2 that exist ATM) 
		if app.EditMode == app.EDITMODE_MESH_PICKER {
			trianglesForAll(BakedUIMeshes)
		}else{
			trianglesForToolbar(BakedUIMeshes, TOOLBAR_EDIT)
		}
	gl.End()

	post()
		
	if app.EditMode != app.EDITMODE_MESH_PICKER {
		colorPalette()
	}
	
	// text for hovered item 
	var y f32 = 0.0
	var hov i32 = tBars[TOOLBAR_EDIT].Hovered
	var name str
	var w i32
	var h i32
	if hov != app.MAX_I32 {
		name = RawMeshes[hov].Name
		w, h = gltext.Metrics("Roboto58", name)
		
		draw.SetColor(draw.COLOR_CYAN)
		gltext.Printf(
			"Roboto58",
			i32.f32(space.ViewWidInPixels - w),
			0.0,
			name)
	}
}


func pre () {
	pumpTheBlinking()
		
	if  app.EditMode != app.EDITMODE_COLORS &&
		app.EditMode != app.EDITMODE_MESH_PICKER {
		
		gridLines()
	}
}


func post () {
	if  app.EditMode != app.EDITMODE_COLORS &&
		app.EditMode != app.EDITMODE_MESH_PICKER {
		
		editorQuads()
		
		gl.Begin(gl.LINES)
			maybeDragBox()				
		gl.End()
	}
}


func colorPalette () {
	var l i32 = len(draw.Colors)
	var d i32 = l // doubled amount 
	d = d * 2 // for DOUBLing SIZE OF draw.COLORS SLICE 
	
	var ext f32 = 2.0 / i32.f32(d) * 0.5 // swatch extent 
	//printf("ext: %f \n", ext)
	
	var pos app.Vec2
	  pos = app.Vec2{ 
		X: space.ViewEdgeL + ext, 
		Y: 1.0             - ext }

	draw.BeginUntexturedQuads()
	
	for i := 0; i < d; i++ {
		//printf("i: %d \n", i)
		var a i32 = i / 2
		var b i32 = a + 1
		b = b % l
		
		if i % 2 == 0 {
			draw.SetColor(a)
		}else{
			draw.SetColor3(draw.GetLerpedColor3(draw.Colors[a], draw.Colors[b], 0.5))
		}
		
		draw.AddRect(pos, ext, ext)
		pos.Y = pos.Y - ext * 2.0
	}
	
	draw.End()
}


func pumpTheBlinking () {
	timeLocalToDraw = timeLocalToDraw + time.Delta
	
	for nextBlinkFlip <= timeLocalToDraw {
		nextBlinkFlip  = timeLocalToDraw + blinkDelay
		pickedNodesAreBright = !pickedNodesAreBright
	}
}


func maybeDragBox() {
	if mesh.Dragging { //&&
		//app.EditMode != app.EDITMODE_TRIANGLES {
		
		if pickedNodesAreBright {
			gl.Color3f(pickR, pickG, minCI)
		} else {
			gl.Color3f(darkCI, darkCI, darkCI) // gray 
		}
		
		// horizontal lines 
		gl.Vertex2f(mesh.DragStart.X,      mesh.DragStart.Y)
		gl.Vertex2f(inputs.MousePointer.X, mesh.DragStart.Y)
		
		gl.Vertex2f(mesh.DragStart.X,      inputs.MousePointer.Y)
		gl.Vertex2f(inputs.MousePointer.X, inputs.MousePointer.Y)
		
		// vertical lines 
		gl.Vertex2f(mesh.DragStart.X,    mesh.DragStart.Y)
		gl.Vertex2f(mesh.DragStart.X,    inputs.MousePointer.Y)
		
		gl.Vertex2f(inputs.MousePointer.X, mesh.DragStart.Y)
		gl.Vertex2f(inputs.MousePointer.X, inputs.MousePointer.Y)
	}
}


func trianglesForAll (meshes []Mesh2D) {
	for i := 0; i < len(meshes); i++ {
		if i/2 == tBars[TOOLBAR_EDIT].Hovered {
			trianglesForOneColored(meshes, i, draw.Colors[draw.COLOR_CYAN])
		}else{
			trianglesForOne(meshes, i)
		}
	}
}


// tbId == toolbar id 
func trianglesForToolbar (meshes []Mesh2D, tbId i32) {
	if tbId >= len(tBars) {
		printf("NO MESHES FOR THAT TOOLBAR! (tbId: %d)! \n", tbId)
		return //////////////////////////////////////////
	}
	
	for j := 0; j < len(tBars[tbId].Items); j++ {
		if j == tBars[tbId].Hovered {
			trianglesForOneColored(meshes, j * 2  , draw.Colors[draw.COLOR_CYAN])
			trianglesForOneColored(meshes, j * 2+1, draw.Colors[draw.COLOR_CYAN])
		}else{
			trianglesForOne       (meshes, j * 2)
			trianglesForOne       (meshes, j * 2+1)
		}
	}
}


func trianglesForOne (meshes []Mesh2D, i i32) {
	//printf("trianglesForOne () id of given []Mesh2D: %d \n", i)
	
	var m Mesh2D
	m = meshes[i]

	ReportBadTriCount("trianglesForOne", i, len(m.TriangleIndices))

	for j := 0; j < len(m.TriangleIndices); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		gl.Color3f(c.R, c.G, c.B)
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(v.X, v.Y)
	}
}


func trianglesForOneColored (meshes []Mesh2D, i i32, col Color3) {
	//printf("trianglesForOneColored () id of given []Mesh2D: %d \n", i)
	
	var m Mesh2D
	m = meshes[i]

	ReportBadTriCount("trianglesForOneColored", i, len(m.TriangleIndices))

	for j := 0; j < len(m.TriangleIndices); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		draw.SetColor3(draw.GetLerpedColor3(m.Colors[pId], col, 0.5))
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(v.X, v.Y)
	}
}


func trianglesForOneWithPos (meshes []Mesh2D, i i32, pos Vec2) {
	//str.print("trianglesForOneWithPos ()")
	
	var m Mesh2D
	m = meshes[i]

	ReportBadTriCount("trianglesForOneWithPos", i, len(m.TriangleIndices))

	for j := 0; j < len(m.TriangleIndices); j++ {
		var pId i32 // point id (from tri ids) 
		pId = m.TriangleIndices[j]
		
		var c Color3
		c = m.Colors[pId]
		//gl.Color3f(c.R, c.G, c.B)
		//gl.Color3f(maxCI, maxCI, maxCI)		
		
		var v Vec2
		v = m.Points[pId]
		
		gl.Vertex2f(pos.X + v.X,   pos.Y + v.Y)
	}
}


func simpleVertexSequence (colorChanIntensity f32) () {
	gl.Color3f(colorChanIntensity, colorChanIntensity, colorChanIntensity)

	/*
	for i := 0; i < len(entity.Ents); i++ {
		var e Entity
		e = entity.Ents[i]

		gl.Vertex2f(e.Pos.X, e.Pos.Y)
	}
	*/
}


func gridLines () {
	gl.Begin(gl.LINES)

	var l f32
	l = -1.0
	
	var r f32
	r = 1.0
	
	numLines := 20
	var unitSpan f32
	unitSpan = f32.mul(r, 2.0)
	unitSpan = f32.div(unitSpan, i32.f32(numLines))
	z := 0.2

	// vertical 
	var fx f32
	fx = l
	for x := 0; x <= numLines; x++ {
		setColor(x)		
		gl.Vertex3f(fx, l, z)
		gl.Vertex3f(fx, r, z)
		
		fx = f32.add(fx, unitSpan)
	}
	
	// horizontal 
	var fy f32
	fy = l
	for y := 0; y <= numLines; y++ {
		setColor(y)		
		gl.Vertex3f(l, fy, z)
		gl.Vertex3f(r, fy, z)
		
		fy = f32.add(fy, unitSpan)
	}
	
	gl.End()
}


var othCol f32 = darkCI / 2.0
func setColor (i i32) {	
	if i % 4 == 0 {
		gl.Color3f(darkCI, darkCI, darkCI)
	} else {
		gl.Color3f(othCol, othCol, othCol)
	}
}


func editorQuads () {
	draw.BeginUntexturedQuads()
	
	var li i32
	for li = 0; li < len(EditLayers); li++ {
		var cols []Color3
		cols = EditLayers[li].Colors
		
		for i := 0; i < len(cols); i++ {
			//gl.Color3f(cols[i].R, cols[i].G, cols[i].B)  TODO: oscillate between this and black?  or just blink to halfway in between? 
			gl.Color3f(darkCI, darkCI, darkCI)

			if pickedNodesAreBright {
				for j := 0; j < len(PickedVerts); j++ {
					if i == PickedVerts[j] {
						gl.Color3f(pickR, pickG, minCI)
					}
				}
			}
			
			
			draw.AddRect(EditLayers[li].Points[i], VertNodeExtent, VertNodeExtent)
		}
	}
	
	draw.End()
}
