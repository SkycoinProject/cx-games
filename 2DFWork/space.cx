package space

import "app"



// FIXME: these should be updated from window change events 
var AspectRatio     f32 // horizontal FOV (field of view) NOT in degrees  
                        // vertical will always be 1.0, horizontal is relative to that 
var ViewWidInPixels i32 // separate values cuz *GetFramebuffer*() return format 
var ViewHeiInPixels i32
var ViewSizeInGL    app.Vec2
var PixelSize       app.Vec2 //           in GL space 
var ViewEdgeL       f64 // viewport left  in GL space 
var ViewEdgeR       f64 // viewport right in GL space 



func Init () {
	str.print("space.Init ()")
	
	ViewWidInPixels = app.START_WIDTH
	ViewHeiInPixels = app.START_HEIGHT
	PixelSize.X = 2.0 / i32.f32(app.START_WIDTH)
	PixelSize.Y = 2.0 / i32.f32(app.START_HEIGHT)
}


func SetSize (wid f32, hei f32) () {
	printf("space.SetSize () \n")

	AspectRatio = wid / hei
	printf("    AspectRatio: %f \n", AspectRatio)

	ViewSizeInGL.X = 2.0 * AspectRatio
	ViewSizeInGL.Y = 2.0
	printf("    ViewSizeInGL.X: %f \n", ViewSizeInGL.X)

	ViewEdgeL = 0.0D - f32.f64(AspectRatio)
	ViewEdgeR =        f32.f64(AspectRatio)
	printf("    ViewEdgeL: %f\n    ViewEdgeR: %f \n",
		ViewEdgeL,
		ViewEdgeR)
}


func PointInBox (p Vec2, box Vec2, extents Vec2) (out bool) {
	if p.X > (box.X - extents.X) &&
		p.X < (box.X + extents.X) &&
		p.Y > (box.Y - extents.Y) &&
		p.Y < (box.Y + extents.Y) {
		
		out = true
	}
}


func BoxesOverlap (a Vec2, b Vec2, aExtents Vec2, bExtents Vec2) (out bool) {
	var padX f32 // minimum distance between centerpoints (before overlap occurs) 
	var padY f32
	var bX f32 // B's local position (in A's space) 
	var bY f32
	
	padX = f32.add(aExtents.X, bExtents.X)
	padY = f32.add(aExtents.Y, bExtents.Y)
	bX = f32.sub(b.X, a.X) 
	bY = f32.sub(b.Y, a.Y)
	
	if bX > padX {
		return false
	}
	
	if bX < -padX {
		return false
	}
	
	if bY > padY {
		return false
	}
	
	if bY < -padY {
		return false
	}
	
	return true
}
