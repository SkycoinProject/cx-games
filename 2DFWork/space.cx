package space

import "app"



// FIXME: these should be updated from window change events 
var PixelWid     f32
var PixelHei     f32
var PixelsAcross Vec2I
var ViewEdgeL  f64 // viewport left 
var ViewEdgeR  f64 // viewport right 



func Init () {
	str.print("space.Init ()")
	
	PixelsAcross.X = app.START_WIDTH
	PixelsAcross.Y = app.START_HEIGHT
	PixelWid = 2.0 / i32.f32(app.START_WIDTH)
	PixelHei = 2.0 / i32.f32(app.START_HEIGHT)
}


func Update (ratio f32) () {
	printf("space.Update () - ratio: %f \n", ratio)

	ViewEdgeL = f32.f64(f32.mul(ratio, -1.0))
	ViewEdgeR = f32.f64(ratio)

	printf("ViewEdgeL, ViewEdgeR: %f, %f \n", ViewEdgeL, ViewEdgeR)
}


func PointInBox (p Vec2, box Vec2, extents Vec2) (out bool) {
	if p.X > (box.X - extents.X) &&
		p.X < (box.X + extents.X) &&
		p.Y > (box.Y - extents.Y) &&
		p.Y < (box.Y + extents.Y) {
		
		out = true
	}
}


func BoxesOverlap (a Vec2, b Vec2, aExtents Vec2, bExtents Vec2) (out bool) {
	var padX f32 // minimum distance between centerpoints (before overlap occurs) 
	var padY f32
	var bX f32 // B's local position (in A's space) 
	var bY f32
	
	padX = f32.add(aExtents.X, bExtents.X)
	padY = f32.add(aExtents.Y, bExtents.Y)
	bX = f32.sub(b.X, a.X) 
	bY = f32.sub(b.Y, a.Y)
	
	if bX > padX {
		return false
	}
	
	if bX < -padX {
		return false
	}
	
	if bY > padY {
		return false
	}
	
	if bY < -padY {
		return false
	}
	
	return true
}
