package mov

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////////////////            ///////////////////
//////////////////////  MOVEMENT  ///////////////////
//////////////////////            ///////////////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////

import "app"
import "entities"
import "glfw"
import "inputs"
import "time"



var Force f32 = 0.08



func dampenNegativeMovement (velocity f32, strength f32) (out f32) {
	out = f32.add(velocity, Force * time.Delta * strength)

	if out > 0.0 {
		out = 0.0
	}
}


func dampenPositiveMovement (velocity f32, strength f32) (out f32) {
	out = f32.sub(velocity, Force * time.Delta * strength)

	if out < 0.0 {
		out = 0.0
	}
}


func SetPlayerVelocityFromInput () {
	entities.ball.vx = getVelocity(entities.ball.vx, inputs.HoldingGoLeft(), inputs.HoldingGoRight())
	entities.ball.vy = getVelocity(entities.ball.vy, inputs.HoldingGoDown(), inputs.HoldingGoUp())
}


func getVelocity (velocity f32, negative bool, positive bool) (out f32) {
	out = velocity

	//____________________________________________ 
	if positive { // _________ speed up positively 
		if out < 0.0 {
			out = dampenNegativeMovement(out, 4.0)
		}

		out = f32.add(out, Force * time.Delta)
	} else
	if negative { // _________ speed up negatively 
		if out > 0.0 {
			out = dampenPositiveMovement(out, 4.0)
		}

		out = f32.sub(out, Force * time.Delta)
	} else { //_________________________ slow down 
		if out > 0.0 {
			out = dampenPositiveMovement(out, 1.0)
		} else
		if out < 0.0 {
			out = dampenNegativeMovement(out, 1.0)
		}
	}
}


// position, velocity, radius, negative edge boundary, positive edge boundary 
func BounceOffWalls (pos f32, vel f32, rad f32, negEdge f32, posEdge f32, negExit bool, posExit bool) (outPos f32, outVel f32) {
	outPos = pos
	outVel = vel

	if f32.lteq(f32.sub(pos, rad), negEdge) { 
		// (hit neg edge) 
		if !negExit {
			outPos = f32.add(negEdge, rad)
			outVel = f32.abs(vel)
		}
	} else
	if f32.gteq(f32.add(pos, rad), posEdge) { 
		// (hit pos edge) 
		if !posExit {
			outPos = f32.sub(posEdge, rad)
			outVel = 0.0 - f32.abs(vel)
		}
	}
}
