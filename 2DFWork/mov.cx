package mov

/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////////////////            ///////////////////
//////////////////////  MOVEMENT  ///////////////////
//////////////////////            ///////////////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////

import "app"
import "entities"
import "glfw"
import "map"
import "inputs"
import "time"



var Force f32 = 4.0



// in, out (velocity) 
func GetPlayerVelocityFromInput (ivX f32, ivY f32) (ovX f32, ovY f32) {
	ovX = getVelocity(ivX, inputs.HoldingGoLeft(), inputs.HoldingGoRight())
	ovY = getVelocity(ivY, inputs.HoldingGoDown(), inputs.HoldingGoUp())
	//printf("ovX,ovY: %v,%v \n", ovX, ovY)
}


func dampenNegativeMovement (velocity f32, strength f32) (out f32) {
	out = f32.add(velocity, Force * time.Delta * strength)

	if  out > 0.0 {
		out = 0.0
	}
}


func dampenPositiveMovement (velocity f32, strength f32) (out f32) {
	out = f32.sub(velocity, Force * time.Delta * strength)

	if  out < 0.0 {
		out = 0.0
	}
}


func getVelocity (velocity f32, negative bool, positive bool) (out f32) {
	out = velocity

	//____________________________________________ 
	if positive { // _________ speed up positively 
		if out < 0.0 {
			out = dampenNegativeMovement(out, 4.0)
		}

		out = f32.add(out, Force * time.Delta)
	} else
	if negative { // _________ speed up negatively 
		if out > 0.0 {
			out = dampenPositiveMovement(out, 4.0)
		}

		out = f32.sub(out, Force * time.Delta)
	}else{ // ________________ slow down 
		if out > 0.0 {
			out = dampenPositiveMovement(out, 1.0)
		} else
		if out < 0.0 {
			out = dampenNegativeMovement(out, 1.0)
		}
	}
}
