package menu

import "app"
import "draw"
import "gltext"



var OptionsSize f32 = 58.0
// main  
var MainSize    f32 = 125.0
var Play        str = "Play"
var Options     str = "Options"
var Controls    str = "Controls"
var Quit        str = "Quit"

var Items [][]draw.TextGL // 1st is menu id, 2nd is item id 



func Init () {
 	printf("menu.Init () \n")
 	
 	// app.MODE_MENU_MAIN
 	MakeItem(0, MainSize, Play)
 	MakeItem(0, MainSize, Options)
 	MakeItem(0, MainSize, Controls)
 	MakeItem(0, MainSize, Quit)
}


func MakeItem(menuId i32, size f32, text str) {
	// while menuId is invalid (menu doesn't exist yet) 
	for len(Items) <= menuId {
	 	var nm []draw.TextGL // new menu 
	 	nm = []TextGL{} // FIXME?!?!?  should need "draw." prefix 
	 	Items = append(
 		Items, nm)
	}
	
 	var mIt draw.TextGL 
 	mIt = draw.TextGL{ Size: size, Text: text }
 	Items[menuId] = append(
	Items[menuId], mIt)

	str.print("made item")
}


func BakeItemText () {
	var w i32
	var h i32
	var pmi i32 = -1            // previous menu id 
	var nm  i32 = len(Items)    // nm == num menus 
	
	for m := 0; m < nm; m++ {   // m  == menu id 
	var ni  i32 = len(Items[m]) // ni == num items 
	for i := 0; i < ni; i++ {        // i  == item id 
		var font str = str.concat("Roboto", sprintf("%d", f32.i32(Items[m][i].Size)))
		Items[m][i].FontId = font		
		w, h = gltext.Metrics(font, 
		Items[m][i].Text)
		Items[m][i].Wid = i32.f32(w)
		Items[m][i].Hei = i32.f32(h)
		Items[m][i].Left = (i32.f32(app.START_WIDTH) - Items[m][i].Wid) / 2.0
		
		// print CLI info 
		if pmi != m {
			pmi = m
			printf("menu %d \n", m)
		}
		
		printf("   fontId: %s --- size: %d,%d --- item: '%s' \n", 
			font, w, h, Items[m][i].Text)
	}
	}
	
	// set vertical boundaries 
	nm = len(Items)    // nm == num menus 
	for m := 0; m < nm; m++ {        // m  == menu id 
	var b /* bottom */ f32 = i32.f32(app.START_HEIGHT - 1) 
		for i := i32.sub(len(Items[m]), 1); i >= 0; i-- {
			var t /* top */ f32 = f32.sub(b, Items[m][i].Hei)
			Items[m][i].Top    = t
			Items[m][i].Bottom = b
			b = t
		}
	}
}


