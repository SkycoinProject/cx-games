package draw

import "os"

import "menu"



//var sFile str = BaseAssetDir + "fonts/Skycoin-Regular.ttf"
var FontPath str = BaseAssetDir + "fonts/roboto-light.ttf"

type TextGL struct {
	Text   str
	FontId str
	Size   f32  // used for gltext init of the font 
	Top    f32  // in pixels 
	Bottom f32  // in pixels 
	Left   f32  // in pixels 
	Wid    f32  // wid/hei caches the resulting string metric queries, 
	Hei    f32  // 		to get the pixel bounds of the text. 
	Hover  bool // pointer is touching/hovering-over measured rect 
	Value  i32  // only for sliders 
	Max    i32  // (exclusionary) max value for sliders (0 == NOT a slider) 
}



func InitFonts () {
	gl.DepthFunc(gl.LESS)
	
	//dir = os.GetWorkingDirectory()
	//printf("os.GetWorkingDirectory(): '%s' \n", dir)

	//str.print("    Loading " + sFile)
	str.print("    Loading " + FontPath)
	LoadFontSized(FontPath, f32.i32(menu.MainSize))
	LoadFontSized(FontPath, f32.i32(menu.OptionsSize))
	LoadFontSized(FontPath, 28)
	LoadFontSized(FontPath, 100)
}


func OutlinedText (s str, color i32, x f32, y f32, scale f32) {
	var alpha f32 = 1.0
	gl.Scalef(scale, scale, 0.0)

	// background shadow 
	printTextWithColor(s, x+1.0, y+1.0, color, alpha)
	printTextWithColor(s, x-1.0, y+1.0, color, alpha)
	printTextWithColor(s, x+1.0, y-1.0, color, alpha)
	printTextWithColor(s, x-1.0, y-1.0, color, alpha)
	// main filling on top 
	printTextWithColor(s, x,     y,     color, alpha)
}


func LoadFontSized (fn str, size i32) { // filename 
	var s str = str.concat("Roboto", sprintf("%d", size))
	
	var osHand i32
	var closeHand bool

	osHand = os.Open(fn)
	gltext.LoadTrueType(osHand, s, size, 32, 127, gltext.LeftToRight)
	closeHand = os.Close(osHand)
	
	/*   THE "s" below should actually be "fn" maybe?
	     2DBUG's screenshot wasn't drawing 'CXtris' text 
	*/   
	var handle i32 = os.Open(fn)
	if handle >= 0 {
		gltext.LoadTrueType(handle, s, size, 32, 127, gltext.LeftToRight)
		if os.Close(handle) {
		}
	}
	
}


// "old-cx-experiment" (CX 0.5something) code 
// coordinate gltext positions 
// (has totally different coord paradigm) 
// to match   GL space 
func EntityAttachedText(x f32, y f32, offsetX f32, offsetY f32, s str) {
/*
	// dynamic text space positions 
	midX := i32.f32(game.ScreenNumPixelsWide) / 2.0
	midY := i32.f32(game.ScreenNumPixelsHigh) / 2.0
	dfc := x / game.ScreenBoundsRight // distance from center 
	x := offsetX + midX + midX * dfc
	y := offsetY + i32.f32(game.ScreenNumPixelsHigh) - (y - game.ScreenBounds.Bottom) * midY

	gl.Color4f(0.8, 0.0, 0.8, 1.0)
	CcText(x, y, s)
*/
}


// x & y are offsets 
func printTextWithColor (s str, x f32, y f32, color i32, alpha f32) {
	SetColorAndAlpha(color, alpha)
	gltext.Printf("Roboto100", f32.i32(x), f32.i32(y), s)
}
