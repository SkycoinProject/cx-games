package draw

import "gl"
import "glfw"
import "gltext"

import "app"
import "geom"
import "menu"
import "space"

/*
	// gl.Ortho() multiplies existing matrix 
	var mulL f64 = space.ViewEdgeL / oldL
	var mulR f64 = space.ViewEdgeR / oldR
	mulL = -mulL
	gl.Ortho(mulL, mulR, -1.0D, 1.0D, 1.0D, -1.0D)
	//printf("OLD screen edges: %f, %f \n", oldL, oldR)
	//printf("      mulL, mulR: %f, %f \n", mulL, mulR)
*/



var BaseAssetDir str = "../2DFWork/draw/assets/"
var GameAssetDir str = "assets/"



func Init () {
	str.print("2DFWork/draw.Init ()")

	initGL()
	initColor()
	InitFonts()

	glfw.SetFramebufferSizeCallback(app.Name, "OnFramebufferSize", "draw")
	
	// set initial values before events are triggered 
	space.Init()
	space.ViewWidInPixels, 
	space.ViewHeiInPixels = glfw.GetFramebufferSize(app.Name)
	
	OnFramebufferSize(app.Name, 
		space.ViewWidInPixels, 
		space.ViewHeiInPixels)
}


func OnFramebufferSize (window str, wid i32, hei i32) {
	printf("    OnFramebufferSize() w,h: %d,%d \n", wid, hei)
	
	space.SetSize(wid, hei)
	menu.BakeItemText()
	//gl.Viewport(0, 0, wid, hei)
}


func GridLines (wanting2shades bool) {
	gl.Begin(gl.LINES)

	var l f32
	l = -1.0
	
	var r f32
	r = 1.0
	
	numLines := 20
	var unitSpan f32
	unitSpan = f32.mul(r, 2.0)
	unitSpan = f32.div(unitSpan, i32.f32(numLines))
	z := 0.2

	// vertical 
	var fx f32
	fx = l
	for x := 0; x <= numLines; x++ {
		if (wanting2shades) {
			setLineColor(x)		
		}else{
			gl.Color3f(Darker, Darker, Darker)
		}
			
		gl.Vertex3f(fx, l, z)
		gl.Vertex3f(fx, r, z)
		
		fx = f32.add(fx, unitSpan)
	}
	
	// horizontal 
	var fy f32
	fy = l
	for y := 0; y <= numLines; y++ {
		if (wanting2shades) {
			setLineColor(y)		
		}else{
			gl.Color3f(Darker, Darker, Darker)
		}

		gl.Vertex3f(l, fy, z)
		gl.Vertex3f(r, fy, z)
		
		fy = f32.add(fy, unitSpan)
	}
	
	gl.End()
}


var othCol f32 = Darker / 2.0
func setLineColor (i i32) {	
	if i % 4 == 0 {
		gl.Color3f(Darker, Darker, Darker)
	}else{
		gl.Color3f(othCol, othCol, othCol)
	}
}


func initGL () {
	glfw.Init()
	glfw.CreateWindow(
		app.Name, 
		app.START_WIDTH, 
		app.START_HEIGHT, 
		app.Name)
	glfw.MakeContextCurrent(app.Name)

	gl.Init()
	gl.ClearColor(0.0, 0.0, 0.0, 1.0)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.Enable(gl.TEXTURE_2D)
	gl.Enable(gl.BLEND)
	gl.DepthMask(true) // not needed by "gltext" package 
}
