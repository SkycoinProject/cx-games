package draw

import "gl"
import "app"
import "entities"
import "geom"



// pics (textures) 
var PicBackground i32
var PicStar       i32
var PicShapeTile  i32
var PicRotLeft    i32
var PicRotRight   i32
var PicArrowLeft  i32
var PicArrowRight i32
var PicArrowDown  i32
var PicMouse      i32
var PicMouseLMB   i32
var PicMouseRMB   i32

// color 
//		"id constants" 
var COLOR_RED       i32
var COLOR_BLUE      i32 = 1
var COLOR_GREEN     i32 = 2
var COLOR_PURPLE    i32 = 3
var COLOR_YELLOW    i32 = 4
var COLOR_ORANGE    i32 = 5
var COLOR_CYAN      i32 = 6
var COLOR_GRAY_DARK i32 = 7

// 		self-contained 
var Black Color3
var White Color3

// 		channel intensities 
var Light  f32 = 0.75
var Mid    f32 = 0.5
var Dark   f32 = 0.3
var Darker f32 = 0.2

// 		rainbow spectrum slice 
var Colors []Color3 


type Color3 struct {
	R f32
	G f32
	B f32
}
type Color4 struct {
	R f32
	G f32
	B f32
	A f32
}



func Init () {
	str.print("2DFWork/draw.Init ()")

	// pics 
	PicBackground = gl.NewTexture("../CXtris/assets/textures/background.jpg")
	PicStar       = gl.NewTexture("../CXtris/assets/textures/star.png")
	PicShapeTile  = gl.NewTexture("../CXtris/assets/textures/tile.png")
	PicRotLeft    = gl.NewTexture("../CXtris/assets/textures/rotate-left.png")
	PicRotRight   = gl.NewTexture("../CXtris/assets/textures/rotate-right.png")
	PicArrowLeft  = gl.NewTexture("../CXtris/assets/textures/arrow-left.png")
	PicArrowRight = gl.NewTexture("../CXtris/assets/textures/arrow-right.png")
	PicArrowDown  = gl.NewTexture("../CXtris/assets/textures/arrow-down.png")
	PicMouse      = gl.NewTexture("../CXtris/assets/textures/mouse.png")   
	PicMouseLMB   = gl.NewTexture("../CXtris/assets/textures/mouse-lmb.png")
	PicMouseRMB   = gl.NewTexture("../CXtris/assets/textures/mouse-rmb.png")


	// color 
	Black = Color3{ R: 0.0, G: 0.0, B: 0.0 }
	White = Color3{ R: 1.0, G: 1.0, B: 1.0 }
	
	addColor(0.9, 0.0, 0.0)          // red 
	addColor(0.3, 0.3, 0.9)          // blue 
	addColor(0.3, 0.9, 0.3)          // green 
	addColor(0.7, 0.0, 0.8)          // purple  
	addColor(1.0, 0.9, 0.0)          // yellow 
	addColor(1.0, 0.5, 0.0)          // orange 
	addColor(0.0, 1.0, 1.0)          // cyan  
	addColor(Darker, Darker, Darker) // gray 


	// text 
	InitFonts()
}


func Ball (ball entities.Ball) {
	var x f32
	var y f32

	gl.Begin(gl.POLYGON)
	gl.Color3f(1.0, 1.0, 1.0)

	var i f32
	for i = 0.0; f32.lt(i, 20.0); i = f32.add(i, 1.0) {
		x = f32.add(ball.x, f32.mul(ball.radius, f32.cos(f32.div(f32.mul(i, geom.TAU), 20.0))))
		y = f32.add(ball.y, f32.mul(ball.radius, f32.sin(f32.div(f32.mul(i, geom.TAU), 20.0))))

		gl.Vertex2f(x, y)
	}

	gl.End()
}


func SetColorById (i i32) {
	gl.Color3f(
		Colors[i].R, 
		Colors[i].G, 
		Colors[i].B)
}


func SetColorByRGB (r f32, g f32, b f32) {
	gl.Color3f(r, g, b)
}


func SetColor3 (color Color3) {
	gl.Color3f(
		color.R, 
		color.G, 
		color.B)
}
func SetColor4 (color Color3, alpha f32) {
	gl.Color4f(
		color.R, 
		color.G, 
		color.B,
		alpha)
}


func QuadsBegin () {
	gl.Begin(gl.QUADS)
}
func End () {
	gl.End()
}


// top, right, bottom, left 
func Quad (t f32, r f32, b f32, l f32) {
	gl.Vertex2f(l, t)
	gl.Vertex2f(r, t)
	gl.Vertex2f(r, b)
	gl.Vertex2f(l, b)
}


func SetSequentiallyCycledColor (i i32) {
	var l i32 = len(Colors)
	var c i32 = i % l
	
	gl.Color3f(
		Colors[c].R,
		Colors[c].G,
		Colors[c].B)
}


func Scaled3SlicedPic (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	var tosy f32 = scaleY / 3.0 // 3rd of scale y 
	var ome f32 // offset (to) middle (section) extent 
	ome = scaleX - tosy
	ome = ome - tosy
	ome = ome / 2.0
	ome = ome * 0.5
	
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)

	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-0.5, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-0.5, -0.5, 0.0)



		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)



		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(0.5, -0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
	gl.End()
}


func addColor (r f32, g f32, b f32) {
	var col Color3
	col = Color3{R: r, G: g, B: b}
	Colors = append(Colors, col)
}
