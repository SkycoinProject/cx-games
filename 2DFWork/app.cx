/* CORPUSC'S GENERAL CX NOTES, 
	NOT NECESSARILY RELATED TO ANY SPECIFIC... 
	...APP/GAME/FRAMEWORK/PROJECT 
	
	
	
	* SIMPLE GAMES to consider making 
		* asteroids
		* asteroid-ship-based space "dungeon" crawl 
		* lunar lander 
		* breakout/pong 
		* berzerk 
		* donkey kong? (platformer) 
	

	
	FORMAL/THOROUGH REPORT & TEST NEEDED FOR THESE BUGS:
	
		couldn't make a Vec2 on the spot, as a parameter of entity.Add()
			had to declare/define first, THEN could pass it
	
	
		
	* DEF NEEDS TO BE ADDED TO ISSUES
	
		-_-
		var color Color  needs newColor
		
		-_-
	    glfw.SetKeyCallback("window", "callback")
	
		-_-
        yarnBall.velocity.y = -yarnBall.velocity.y

		-_-
		FACING = LEFT
		var LEFT i32 = 2
		(didn't take on the value)
		-_-
		error: map.cx:24 identifier '*lcl_215' does not exist (lt.eq())
		
		-_-
		couldn't use indexception ( [[ ]] ) 
		
		-_- 
		no friendly errors / warnings trying to use unimported packages 
		
		-_-  ENHANCEMENT 
		we need math package, or things like i32.maxvalue
		
		-_-  ENHANCEMENT 
		no nil
		
		-_- 
		when instantiating a new struct (at least slices of structs, with initial data) can't have space tween var name and opening curly brace
		
		-_-
		"error: graphical2d.cx:188 function 'f32.mod' does not exist"
		and yet no error given for f % ff
	
	
	
	* CX FIXES/ADDITIONS 
	
		* type.mod() bug involving line 1600, mixing up 32/64 bit 
		* bindings for .rand() on types other than i32
*/






/* OLDEST NOTES FROM OLD/CANCELLED (by Synth) RIDGE-BLASTER PROJECT 



2dbug, [16.08.19 19:14]
You can remove without Gc if you don't care about the order by swapping element n with element len(slice)-1 and then resize(slice, newlen)
Yup iirc resize to a smaller size j just update the len of the slice

2dbug, [16.08.19 19:20]
Yes it's better to avoid allocations. I coded resize to avoid allocation when len is reduced

2dbug, [16.08.19 19:21]
You could also keep track of len manually in a var and never call resize








i dunno that i understood Inge's advice to Moses, but it made me think of this way of handling dead/alive entities:

* 2 vars used in conjunction with the entity slice: 
	var numDead i32 
	var spawnValues Entity // fresh new spawn defaults 

* 2 parts to the entities slice.  all the deads 1st, then all the 		alive entities 


* when updating actives, no need to check for alive status & jump past deads.  we just start at index of numDead


* no need to FIND a dead to recycle (potentially cycling through whole slice)


* on death:

func kill (victim i32) {
	// copy 1st alive to no longer needed corpse slot 
	entities[victim] = entities[numDead] 
	numDead++ 
}


* on spawning:

func spawnNew () {
	if numDead == 0 {
		entities = append(entities, spawnValues)
	} else {
		entities[numDead-1] = spawnValues
		numDead--
	}
}	

*/














/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
/////////////////////             ///////////////////
/////////////////////     APP     ///////////////////
/////////////////////             ///////////////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
///////  Things ALL apps/games might access  ////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////

package app



// FIXME when CX gets constants 
var START_WIDTH  i32 = 1280
var START_HEIGHT i32 = 720
// these next 2 are used like how i would use nullable types 
//		in C#.  often times, i want a value that means 
//		"this has not specifically been set to any desired 
//		value", or "this field is N/A (not applicable)". 
//		why not use 0/0.0 to signify this?  because often 
//		there's a desirable USE of zero (as a value) 
var MAX_I32      i32 = 2147483647
//		i would have to learn all about the convoluted floating 
//		point storage scheme to know the max value. 
//		or extend CX myself, to expose Golang's math.MaxFloat32 
//		& such.  and i can't truthfully call this "max" 
var TOO_BIG_F32  f32 = 999777.999777

var Name         str
var Controls     str


// app modes 
var MODE_MENU_MAIN       i32
var MODE_MENU_OPTIONS    i32 = 1
var MODE_MENU_CONTROLS   i32 = 2
var MODE_MENU_MAX        i32 = 3 // anything < this == open menu 
var MODE_EDITOR          i32 = 4
var MODE_PLAYING         i32 = 5
var MODE_GAME_OVER       i32 = 6
var MODE_MAX             i32 = 7
var Mode                 i32 = MODE_MENU_MAIN

// 		editor 
var EDITMODE_VERTICES    i32
var EDITMODE_TRIANGLES   i32 = 1
var EDITMODE_COLORS      i32 = 2
var EDITMODE_MESH_PICKER i32 = 3
var EDITMODE_MAX         i32 = 4
var EditMode             i32 = EDITMODE_VERTICES


type Vec2 struct {
	X f32
	Y f32
}

type Vec2I struct {
	X i32
	Y i32
}

type Vec2F64 struct {
	X f64
	Y f64
}

type Rect struct {
	T f32 // top 
	R f32 // right 
	B f32 // bottom 
	L f32 // left 
}



func Init (name str, controls str) {
	str.print("app.Init ()")
	Name = name
	Controls = controls
	CliIntro()
	showWorkHoursNeeded() // calculate CorpusC's current daily goal 
}


func CliIntro () {
	printf("\n%s \n\n%s \n\n", Name, Controls)
}


func ModF32(num f32, op f32) (out f32) {
	//FIXME/DELETEME? when CX mod() is fixed 
	out = num - i32.f32(f32.i32(num))
}


func GetLerped (a f32, b f32, frac f32) (out f32) {
	var delta f32 = (a - b) * frac
	out = b + delta
}


func showWorkHoursNeeded () {
	// current "workmonth" (pay period) goes from the 5th to the 4th of following month 
	var today       i32 = 9   // day of current month 
	var hoursWorked f32 = 3.5

	var hoursGoal   f32 = 50.0 // ...to work this month (pay period) 
	var daysInMonth i32 = 30   // current month that majority of days are in 
	
	
	var daysLeft    i32 = daysInMonth - today + 4
	var hoursLeft   f32 = hoursGoal   - hoursWorked
	printf("============================================================================\n")
	printf("============================================================================\n")
	printf("====                      CorpusC's daily time goal                     ====\n")
	printf("============================================================================\n")
	printf("====  daysLeft: %d (includes today) \n", daysLeft)
	printf("====  hoursLeft: %f \n", hoursLeft)
	printf("====  hours needed (to work per day): %f \n", hoursLeft / i32.f32(daysLeft))
	printf("============================================================================\n")
	printf("============================================================================\n")
	printf("============================================================================\n")
}
