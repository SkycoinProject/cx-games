/*

In our imagined world for this game, the universe is filled with solid
rock everywhere.

We have a cell grid of possibilities.  We carve out air/room space
in MOST of those cells.  Some will remain
solid rock, for a bit of variety in overall map shape.

I THINK OF THE Y DIMENSION INCREASING UPWARDS
	SO KEEP THIS IN MIND WITH geom.DIR_* (directions) 
	& THE "Cells" GRID INDEXING 
	
This is how it is by default in OpenGL space, Unity and many modern 3D
apps, so I think it's important to generally use this convention. 

*/

package map

import "gl"

import "app"
import "draw"
import "entities"
import "geom"



var NumCellsAcross  i32 = 4 // in both dimensions 
var WTh             f32 = 0.085 // wall thickness 
var CellSpan        f32 = 1.0
var CellSpanHalf    f32 = CellSpan / 2.0
var Cells           [4][4]Cell   // FIXME: use constants when we can 
var Carvs           []CarvedRoom // used/carved-out locations of the Cells grid 
 
var plr             i32 = entities.ENT_PLAYER // FIXME?: this is wrong to have in "map"? 
// collision check responses 
var RESP_INDOORBAND i32 // the WTh strip along edge of cell 
var RESP_OUTOFROOM  i32 = 1
var RESP_NOTOUCH    i32 = 2
var response        i32

type Cell struct {
	CarvsId i32 // MAX_I32 == solid rock 
	Exits []i32 // initial possibilities that point to all valid grid slot neighbor cells 
}

type CarvedRoom struct {
	// insets (from room bounds) 
	/*
	Top    f32
	Right  f32
	Bottom f32
	Left   f32
	*/
	
	Pos     app.Vec2I
	Exits   []i32 // the actual room connections after map generation 
	MinEdge app.Vec2 // boundaries of the current cell it's in 
	MaxEdge app.Vec2 // ^ 
}



func Init () {
	str.print("map.Init ()   SHOULD BE AFTER ENTITIES")
	
	setupPossibleExits()
	carveOutConnectedRooms()
	
	// center player in random room 
	var x  i32
	var y  i32
	var c  Cell
	var ri i32  // random room id 
	x, y, c, ri = getRandomCarvedRoom()
	
	// put player in center 
	entities.All[plr][0].X = i32.f32(x) * CellSpan + CellSpanHalf
	entities.All[plr][0].Y = i32.f32(y) * CellSpan + CellSpanHalf
	
	printf("PLAYER'S 1st ROOM %d, %d \n", 
		x, 
		y)
	printf("PLAYER'S 1st POS  %f, %f \n", 
		entities.All[plr][0].X, 
		entities.All[plr][0].Y)
}


func GetRoom (id i32) (room CarvedRoom) {
	//printf("GetRoom(%d) len(Carvs): %d \n", id, len(Carvs))
	room = Carvs[id]
}
func GetRoomIdAt (x i32, y i32) (id i32) {
	id = Cells[y][x].CarvsId
}
/*
func GetNumCarvedOutRooms () (num i32) {
	num = len(Carvs)
}
func GetNumExitsAt (roomId i32) (num i32) {
	num = len(Carvs[roomId].Exits)
}
func GetExitAt (roomId i32, exitId i32) (num i32) {
	num = len(Carvs[roomId].Exits[exitId])
}
*/ 


func HasExit (dir i32, ti i32, ei i32) (out bool) {
	printf("map.HasExit (%s)?????   ", geom.GetTextForDir(dir))
	var x i32 = f32.i32(entities.All[ti][ei].X)
	var y i32 = f32.i32(entities.All[ti][ei].Y)
	printf(" - x, y: %d, %d) \n", x, y)
	
	var ci i32 = Cells[y][x].CarvsId
	var r CarvedRoom
	r = Carvs[ci]
	
	for i := 0; i < len(r.Exits); i++ {
		if dir == r.Exits[i] {
			printf("    YES! \n")
			out = true
			return
		}
	}
	
	printf("    NO! \n")
	out = false
}


// ideally, the below func would be in "sky-taxi/draw.cx", 
// but moving it there would require series of funcs (such as
// (GetRoom(), etc.,
// in order to get all the data you'd need from the "map" package. 
// since ATM, CX 0.7.0 has trouble getting values out of packages. 
// ATM CX gives lot's of mystery errors when 
// such out-of-package data access attempts are made 
func DrawQuads () {
	var x f32
	var y f32

	draw.BeginUntexturedQuads()
		var n i32 = len(Carvs)
		//printf("len(Carvs): %d \n", n)
		
		for i := 0; i < n; i++ {
			var x i32 = Carvs[i].Pos.X
			var y i32 = Carvs[i].Pos.Y
			
			var l f32 = f32.mul(i32.f32(x), CellSpan)
			var b f32 = f32.mul(i32.f32(y), CellSpan)
			var r f32 = l + CellSpan
			var t f32 = b + CellSpan
			
			draw.SetSequentiallyCycledColor(i32.add(x, i32.mul(y, NumCellsAcross)))
			draw.UntexturedQuad(t, r, b, l)
			
			// connection rects 
			draw.SetColorByRGB(0.0, 0.0, 0.0) // black 
			var ex i32 // exit 
			
			for j := 0; j < len(Carvs[i].Exits); j++ {
				var ex i32 = Carvs[i].Exits[j]

				if ex == geom.DIR_LEFT {
					draw.UntexturedQuad(t-WTh, r-WTh, b+WTh, l)
				}else	
				if ex == geom.DIR_RIGHT {
					draw.UntexturedQuad(t-WTh, r,     b+WTh, l+WTh)
				}else	
				if ex == geom.DIR_DOWN {
					draw.UntexturedQuad(t-WTh, r-WTh, b,     l+WTh)
				}else	
				if ex == geom.DIR_UP {
					draw.UntexturedQuad(t,     r-WTh, b+WTh, l+WTh)
				}
			}
			
			/*
			// DEBUG overlay line-marks to visually enumerate grid pos 
			// 		in X 
			draw.SetColor3(draw.White)
			l = l + CellSpanHalf
			r = l + 0.02
			
			for i := 0; i < x; i++ {
				draw.UntexturedQuad(t, r, b, l)
				l = l + 0.03
				r = r + 0.03
			}
			
			// reset to entire cell dimensions 
			var l f32 = f32.mul(i32.f32(x), CellSpan)
			var b f32 = f32.mul(i32.f32(y), CellSpan)
			var r f32 = l + CellSpan
			var t f32 = b + CellSpan

			// 		in Y 
			draw.SetColor(draw.COLOR_GRAY_DARK)
			b = b + CellSpanHalf
			t = b + 0.02
			
			for i := 0; i < y; i++ {
				draw.UntexturedQuad(t, r, b, l)
				b = b + 0.03
				t = t + 0.03
			}
			*/
		}
	draw.End()
}


func setupPossibleExits () {
	for     iY := 0; iY < NumCellsAcross; iY++ {
		for iX := 0; iX < NumCellsAcross; iX++ {
			var r Cell
			r.CarvsId = app.MAX_I32
			
			if iX > 0 {
				r.Exits = append(
				r.Exits, geom.DIR_LEFT)
			}
			
			if iX < i32.sub(NumCellsAcross, 1) {
				r.Exits = append(
				r.Exits, geom.DIR_RIGHT)
			}
			
			if iY > 0 {
				r.Exits = append(
				r.Exits, geom.DIR_DOWN)
			}
			
			if iY < i32.sub(NumCellsAcross, 1) {
				r.Exits = append(
				r.Exits, geom.DIR_UP)
			}
			
			Cells[iY][iX] = r
			//printf("setupPossibleExits() len(r.Exits): %d \n", len(r.Exits))
			////var poss []i32 = Cells[iY][iX].Exits
			////printf("Cells[iY][iX].Exits: %d \n", len(poss))
		}
	}
}


func getRandomCarvedRoom () (x i32, y i32, c Cell, roomId i32) {
	roomId = i32.rand(0, len(Carvs))
	printf("getRandomCarvedRoom () - roomId: %d \n", roomId)
	x = Carvs[roomId].Pos.X
	y = Carvs[roomId].Pos.Y
	c = Cells[y][x]
}


func carveOutConnectedRooms () {
	var x i32
	var y i32
	var oc Cell  // older cell 
	var orId i32 // older room id 
		
	var numUncarved i32 = i32.rand(1, 5)
	printf("numUncarved: %v \n", numUncarved)
	var n i32 = NumCellsAcross * NumCellsAcross - numUncarved
	
	for i := 0; i < n; i++ {
		if /* 1st room */ i == 0 {
			// make anywhere 
			x = i32.rand(0, NumCellsAcross)
			y = i32.rand(0, NumCellsAcross)
			var cr CarvedRoom = carveOutRoom(x, y, len(Carvs))
	
			
			
			Carvs = append(
			Carvs, cr)
			printf("carved FIRST new @ %d, %d   -   len(Carvs): %d \n", x, y, len(Carvs))
		}else{
			// old cell, old (carved) room id 
			x, y, oc, orId = getRandomCarvedRoom()
			//printf("carveOutConnectedRooms() len(r.Exits): %d \n", len(r.Exits))
			
			for len(oc.Exits) < 1 {
				x, y, oc, orId = getRandomCarvedRoom()
			}
			
			// random (exit) id 
			var ri i32 = i32.rand(0, len(oc.Exits))
			var e /* exit direction (from old) */ i32 = oc.Exits[ri]

			str.print("___________________________________________________________")
			if e == geom.DIR_LEFT {
				drillConnectingWallsAndMaybeRoom(x, y, e, x-1, y)
			}else			
			if e == geom.DIR_RIGHT {
				drillConnectingWallsAndMaybeRoom(x, y, e, x+1, y)
			}else			
			if e == geom.DIR_DOWN {
				drillConnectingWallsAndMaybeRoom(x, y, e, x, y-1)
			}else			
			if e == geom.DIR_UP {
				drillConnectingWallsAndMaybeRoom(x, y, e, x, y+1)
			}

			Carvs[orId].Exits = append(
			Carvs[orId].Exits, e)
			printf("--------------------- Carvs[orId: %d].(len)Exits: %d \n", orId, len(Carvs[orId].Exits))
			//drawAsciiGraphics()
		}
	}

	//drawAsciiGraphics()
}


func drawAsciiGraphics () {
	// XXXXXXXX
	//    ^^ 
	// << 11 >> 
	//    vv
	
	for iY := NumCellsAcross - 1; iY >= 0; iY-- {
		var s0 str
		var s1 str
		var s2 str
		
		for iX := 0; iX < NumCellsAcross; iX++ {
			var carvId i32 = Cells[iY][iX].CarvsId
			
			if carvId == app.MAX_I32 {
				s0 = s0 + "XXXXXXXX  "
				s1 = s1 + "XXXXXXXX  "
				s2 = s2 + "XXXXXXXX  "
			}else{
				var l bool
				var r bool
				var d bool
				var u bool

				for j := 0; j < len(Carvs[carvId].Exits); j++ {
					var ex i32 = Carvs[carvId].Exits[j]

					if ex == geom.DIR_LEFT {
						l = true
					}
					
					if ex == geom.DIR_RIGHT {
						r = true
					}
					
					if ex == geom.DIR_DOWN {
						d = true
					}
					
					if ex == geom.DIR_UP {
						u = true
					}
				}
				
				if u {
					s0 = s0 + "   ^^     "
				}else{
					s0 = s0 + "          "
				}
				
				if l {
					s1 = s1 + "<< "
				}else{
					s1 = s1 + "   "
				}
				
				// id in the middle 
				if carvId < 10 {
					s1 = s1 + " "
				}
				var st str = sprintf("%d", carvId)
				s1 = s1 + st
				
				if r {
					s1 = s1 + " >>  "
				}else{
					s1 = s1 + "     "
				}
				
				if d {
					s2 = s2 + "   VV     "
				}else{
					s2 = s2 + "          "
				}
			}
		}
		
		str.print("\n")
		str.print(s0)
		str.print(s1)
		str.print(s2)
	}
}


func carveOutRoom (x i32, y i32, CarvsId i32) (out CarvedRoom) {
	out.Pos.X = x
	out.Pos.Y = y
	Cells[y][x].CarvsId = CarvsId
}


// old x,y, new x,y 
func drillConnectingWallsAndMaybeRoom (oX i32, oY i32, dir i32, nX i32, nY i32) {
	var show bool
	var nr CarvedRoom // new/target/destination room (to connect to) 
	var newId i32 = Cells[nY][nX].CarvsId

	if newId == app.MAX_I32 {
		if show {
			str.print("CARVE ROOM")
		}
		
		nr = carveOutRoom(nX, nY, len(Carvs))
		if show {
			printf("cell @ %d,%d .CarvsId: %d \n", nX, nY, Cells[nY][nX].CarvsId)
		}
			
		nr.Exits = append(
		nr.Exits, geom.GetInvertedDir(dir))
		
		// set boundaries (for limiting collision checks) 
		var minX f32 = i32.f32(nX) * CellSpan
		var minY f32 = i32.f32(nY) * CellSpan	
		nr.MinEdge.X = minX + WTh
		nr.MinEdge.Y = minY + WTh
		nr.MaxEdge.X = minX + CellSpan - WTh
		nr.MaxEdge.Y = minY + CellSpan - WTh

		Carvs = append(
		Carvs, nr)
	}else{
		if show {
			str.print("DRILL WALL")
		}	
			
		Carvs[newId].Exits = append(
		Carvs[newId].Exits, geom.GetInvertedDir(dir))
	}
	
	if show {
		printf("OLD room %d (%d,%d)   %s \n", Cells[oY][oX].CarvsId, oX, oY, geom.GetTextForDir(dir))
	}
	removeExitFromGrid(oX, oY, dir)
	
	if show {
		printf("NEW room %d (%d,%d)   %s \n", newId, nX, nY, geom.GetTextForDir(geom.GetInvertedDir(dir)))
	}
	removeExitFromGrid(nX, nY, geom.GetInvertedDir(dir))
	
	if show {
		printf("--------------------- nr.Exits: %d \n", len(nr.Exits))
		printf("len(Carvs): %d \n", len(Carvs))
	}

	//if newId != app.MAX_I32 {
	//	Carvs[newId] = nr
	//}
}


func removeExitFromGrid (x i32, y i32, dir i32) {
	var log bool = false
	
	if log { 
		str.print("___________________________________________________________")
		printf("removeExitFromGrid(%d, %d, %s) \n", x, y, geom.GetTextForDir(dir))
	}
	
	var c Cell = Cells[y][x]
	// remove from Exits 
	
	if log { printf("------num exits INSIDE-BEFORE: %d \n", len(c.Exits))
	}

	var n i32 = len(c.Exits)
	for i := i32.sub(n, 1); i >= 0; i = i32.sub(i, 1) {
		var s str = geom.GetTextForDir(c.Exits[i])
		
		if c.Exits[i] == dir {
			s = str.concat(s, "  <----------------- REMOVING")
			c.Exits = remove(c.Exits, i)
		}
		
		if log { str.print(s)
		}
	}
	
	if log { printf("------num exits INSIDE-AFTER: %d \n", len(c.Exits))
	}
}


func ValidRoomAt (x i32, y i32) (out bool) {
	printf("map.ValidRoomAt(%d, %d)  \n", x, y)
	printf("map.ValidRoomAt(%d, %d) %f,%f \n", x, y, entities.All[plr][0].X, entities.All[plr][0].Y)

	if  x >= 0 && x < NumCellsAcross &&
		y >= 0 && y < NumCellsAcross &&
		Cells[y][x].CarvsId != app.MAX_I32 {
		
		//printf("NEXT FUNC SETS NEW ROOM ID: %d \n", Cells[y][x].CarvsId)
		out = true		
	}else{
		for i := 0; i < 12; i++ {
			printf("############ INVALID SPACE, PLAYER SHOULDN'T BE HERE! %d, %d \n", x, y)
		}
	}
}


func keepWithinDoorFrame (ddPos f32, rad f32, negDF f32, posDF f32) (ddPosOut f32) {
	if (ddPos)   < (negDF + rad) {
		ddPosOut =  negDF + rad
		printf("touched neg doorframe edge: %f \n", negDF)
	}else
	if (ddPos)   > (posDF - rad) {
		ddPosOut =  posDF - rad
		printf("touched pos doorframe edge: %f \n", posDF)
	}
}