package inputs



// i'm not really happy with the default repeat timing of GLFW. 
// so later, make the delay-until-repeat a little less,
// and make the repeats maybe around twice as fast
//var timeSinceAnyKeyEvent f64
//var timeToRepeat

var keyEventCodes   []i32
var keyEventActions []i32



func GetKeyEvent () (key i32, action i32) {
	if len(keyEventCodes) <= 0 {
		key    = app.MAX_I32
		action = app.MAX_I32
	}else{
		key    = keyEventCodes[0]
		action = keyEventActions[0]
		//printf("GetKeyEvent - len(keyEventCodes): %d \n", len(keyEventCodes))
		keyEventCodes   = remove(keyEventCodes, 0)
		keyEventActions = remove(keyEventActions, 0)
		
		if action == glfw.Press {
			LatestUserActionTime = glfw.GetTime()
		}
	}
}


func CloseAppOnDeveloperShortcut (key i32) {
	if key == GLFW_KEY_5 { 
		str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ QUITTING GAME ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
		str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  (PRESSED 5)  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
		glfw.SetShouldClose(app.Name, true)
	}
}


// polling 
func HoldingGoLeft () (out bool) {
	if  i32.eq(glfw.GetKey(app.Name, GLFW_KEY_A),    1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_LEFT), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_Y),    1) {
		out = true
	}
}
func HoldingGoRight () (out bool) {
	if  i32.eq(glfw.GetKey(app.Name, GLFW_KEY_D),     1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_RIGHT), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_N),     1) {
		out = true
	}
}
func HoldingGoDown () (out bool) {
	if  i32.eq(glfw.GetKey(app.Name, GLFW_KEY_S),    1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_DOWN), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_F2),   1) {
		out = true
	}
}
func HoldingGoUp () (out bool) {
	if  i32.eq(glfw.GetKey(app.Name, GLFW_KEY_W),  1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_UP), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_F3), 1) {
		out = true
	}
}


// keycode events 
func OpenedMenu (key i32) (out bool) {
	if eventIsBackOrEscape(key) ||
		key == GLFW_KEY_ENTER ||
		key == GLFW_KEY_TAB || 
		key == GLFW_KEY_BACKSPACE { 

		app.Mode = app.MODE_MENU_MAIN
		UseMousePointer(true)
		out = true
	}
}


// 		directions 
func EventMoveLeft (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_A) ||
    i32.eq(key, GLFW_KEY_LEFT) {
    out = true
  }
}
func EventMoveRight (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_D) ||
    i32.eq(key, GLFW_KEY_RIGHT) {
    out = true
  }
}
func EventMoveDown (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_S) ||
    i32.eq(key, GLFW_KEY_DOWN) {
    out = true
  }
}
func EventMoveUp (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_W) ||
    i32.eq(key, GLFW_KEY_UP) {
    out = true
  }
}

func EventAbilityLeft (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_Q) ||
  	i32.eq(key, GLFW_KEY_LEFT_CONTROL) ||
    i32.eq(key, GLFW_KEY_RIGHT_ALT) {
    out = true
  }
}

func EventAbilityRight (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_E) ||
  	i32.eq(key, GLFW_KEY_LEFT_ALT) ||
    i32.eq(key, GLFW_KEY_RIGHT_CONTROL) {
    out = true
  }
}


func eventIsBackOrEscape (key i32) (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_ESCAPE), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_HOME), 1) {
		out = true
	}
}


func onKeyEvent (window str, key i32, scancode i32, action i32, mods i32) {
	keyEventCodes = append(
	keyEventCodes, key)
	
	keyEventActions = append(
	keyEventActions, action)
}
