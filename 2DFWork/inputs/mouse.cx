package inputs

import "app"
import "space"



var BufferingNotchyDeltas bool // distance threshold triggers (for low-res/notchy/blocky/jumpy movement) 
var BufferingPointerSpots bool // pointer event spots/positions 
var MousePointer          app.Vec2
var MousePosInPixels      app.Vec2F64
var HoldingLeftButton     bool

var mouseMoveThreshold f64 = 85.0D // for blocky/notchy mouse movement (like CXtris uses) 
var dist               app.Vec2F64 // distance since latest blocky mouse movement 
var buttonEventCodes   []i32
var buttonEventActions []i32
var pointerEventSpots  []app.Vec2
var notchyMoveDeltas   []app.Vec2I



func GetButtonEvent () (button i32, action i32) {
	if len(buttonEventCodes) <= 0 {
		button = app.MAX_I32
		action = app.MAX_I32
	}else{
		button = buttonEventCodes[0]
		action = buttonEventActions[0]
		//printf("GetButtonEvent - len(buttonEventCodes): %d \n", len(buttonEventCodes))
		buttonEventCodes   = remove(buttonEventCodes, 0)
		buttonEventActions = remove(buttonEventActions, 0)
		
		if action == glfw.Press {
			LatestUserActionTime = glfw.GetTime()
		}
	}
}


func GetPointerEvent () (out app.Vec2) {
	if len(pointerEventSpots) <= 0 {
		out.X = app.TOO_BIG_F32
		out.Y = app.TOO_BIG_F32
	}else{
		out = pointerEventSpots[0]
		//printf("GetPointerEvent - len(pointerEventSpots): %d \n", len(pointerEventSpots))
		pointerEventSpots = remove(pointerEventSpots, 0)
		
		if bool.not(BufferingNotchyDeltas) {
			LatestUserActionTime = glfw.GetTime()
		}
	}
}


func GetNotchyMouseDelta () (out app.Vec2I) {
	if len(notchyMoveDeltas) <= 0 {
		out.X = app.MAX_I32
		out.Y = app.MAX_I32
	}else{
		out = notchyMoveDeltas[0]
		//printf("GetNotchyMouseDelta - len(notchyMoveDeltas): %d \n", len(notchyMoveDeltas))
		notchyMoveDeltas = remove(notchyMoveDeltas, 0)
		LatestUserActionTime = glfw.GetTime()
	}
}


func PointerInYPixelRange (lesser f32, greater f32) (out bool) {
	if MousePosInPixels.Y < f32.f64(greater) &&
		MousePosInPixels.Y >= f32.f64(lesser) {
			
		out = true
	}
}


func SetMousePointer (wanted bool) {
	if wanted {
		glfw.SetInputMode(app.Name, glfw.Cursor, glfw.CursorNormal)
	} else {
		glfw.SetInputMode(app.Name, glfw.Cursor, glfw.CursorDisabled)
		dist.X = 0.0D
		dist.Y = 0.0D
	}
}


func blockyMouseMovement () {
	if app.Mode == app.MODE_PLAYING {
		dist.X = f64.add(dist.X, deltaX64)
		dist.Y = f64.add(dist.Y, deltaY64)
	
		if dist.X > mouseMoveThreshold {
			addNotchyDelta(1, 0)
			dist.X = 0.0D
			dist.Y = 0.0D
		} else 
		if dist.X < -mouseMoveThreshold {
			addNotchyDelta(-1, 0)
			dist.X = 0.0D
			dist.Y = 0.0D
		}	

		if dist.Y > mouseMoveThreshold {
			addNotchyDelta(0, -1)
			dist.X = 0.0D
			dist.Y = 0.0D
		} else
		if dist.Y < -mouseMoveThreshold {
			addNotchyDelta(0, 1)
			dist.X = 0.0D
			dist.Y = 0.0D
		}
	}
}


func addNotchyDelta (x i32, y i32) {
	var del app.Vec2I
	del   = app.Vec2I{ X: x, Y: y }
	notchyMoveDeltas = append(
	notchyMoveDeltas, del)
}


// buttons 
func onMouseButtonEvent (window str, button i32, action i32, mods i32) {
	buttonEventCodes = append(
	buttonEventCodes, button)
	
	buttonEventActions = append(
	buttonEventActions, action)

	
	// cache state for polling 
	if button == 0 { // LMB 
		if action == 0 { // release 
			HoldingLeftButton = false
		}else 
		if action == 1 { // press 
			HoldingLeftButton = true
			//printf("onMouseButtonEvent() PRESSED %f, %f \n", MousePointer.X, MousePointer.Y)
		}
	}
}


// position 
var oldV Vec2
var old64 Vec2F64
var deltaX f32
var deltaY f32
var deltaX64 f64
var deltaY64 f64
var dist Vec2F64 // distance since latest piece movement 
func onCursorPosEvent (window str, x f64, y f64) {
	//str.print("onCursorPosEvent ()")

	oldV.X = MousePointer.X
	oldV.Y = MousePointer.Y
	old64.X = MousePosInPixels.X
	old64.Y = MousePosInPixels.Y
	MousePosInPixels.X = x
	MousePosInPixels.Y = y

	
	// 1st get fraction from left to right edge 
	var mX f32 = f64.f32(x) / i32.f32(space.ViewWidInPixels)
	var mY f32 = f64.f32(y) / i32.f32(space.ViewHeiInPixels)
	// scale it to GL size 
	mX = mX * space.ViewSizeInGL.X
	mY = mY * space.ViewSizeInGL.Y
	// offset it to start with negative edge value 
	mX = mX - space.AspectRatio
	//		also flip it around, since Y increases UPWARDS in GL 
	mY = 1.0 - mY
	
	MousePointer.X = mX
	MousePointer.Y = mY
	printf("mX,mY: %f, %f \n", mX, mY)



	//printf("MousePointer.X: %f \n", MousePointer.X)
	//printf("MousePointer.Y: %f \n", MousePointer.Y)
	

	deltaX = f32.sub(MousePointer.X, oldV.X)
	deltaY = f32.sub(MousePointer.Y, oldV.Y)
	deltaX64 = f64.sub(x, old64.X)
	deltaY64 = f64.sub(y, old64.Y)


	if BufferingPointerSpots {
		var v app.Vec2 
		v = app.Vec2{ X: MousePointer.X, Y: MousePointer.Y }
		pointerEventSpots = append(
		pointerEventSpots, v)
	}
	
	
	if BufferingNotchyDeltas {
		blockyMouseMovement()
	}
		
	//printf("onCursorPosEvent %f, %f \n", deltaX64, deltaY64)
	//printf("onCursorPosEvent %f, %f \n", MousePointer.X, MousePointer.Y)
}
