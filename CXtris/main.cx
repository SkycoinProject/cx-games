package main

import "gl"
import "glfw"
import "app"
import "inputs"
import "shape"
import "time"

/* 

TODO:

REQUIRED FEATURES:

* use Skycoin font 
* make clicking on sliders (with no mouse movement) set handle position again 
* game speed increases every ____ _____ 



PRIORITY FEATURES:

* pad menu item text with marginally bigger backgrounds (or axe curr texture) 
		if keeping texture, fix the 3-slicing in O
* sliders 
	* mouse sensitivity



JUICE WISHLIST: 
   (not necessary, but would be nice) 

* when shape spawns & immediately collides, visually explode it
		(maybe slowly, so it's clear how it collided) 
* when pressing unfulfilled rotate key/button, indicate center block 
* guide lines down to landing 
* instadrop action 
* Smooth motion interpolations (prioritized) 
	* row collapsing
	* player rotations (problem: making the piece's movement look more like physical reality would make some valid moves look crazy.  But while smoothly turning, the piece could be drawn as a transparent white'ish ghost, which would go a long way towards making the "gear teeth"-passing-through-each-other look sensible)
	
* animate exploding the row blocks 

* score delta text (with "X3" modifiers ) pops up near the exploding rows.  possibly travelling
up to the total score printout

* animate clearing old playfield and setting up the new one, between games.  maybe they all shoot out of a point on the screen (maybe logo) and fly/rotate to the final positions.  like dealing out cards 

* error text when player tries invalid moves & rotations (probably JUST 
	rotations, because invalid moves are too obvious).  maybe stifle 
	any text popups that would be triggered by key repeat events 

* animated startup/menu screen
		would be cool to show big versions of all the shapes/pieces, circularly rotating around the menu
		
* high scores list
		animation for when you break records 

*/

func main () {
	gameInit()
	
	for bool.not(glfw.ShouldClose(app.Name)) {
		timeUpdate()
		gameUpdate()
		drawAll()
		
		glfw.PollEvents()
		glfw.SwapBuffers(app.Name)
	}
}
