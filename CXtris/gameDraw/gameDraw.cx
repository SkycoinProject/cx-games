package gameDraw

import "gl"

import "app"
import "draw"
import "gui"
import "map"
import "main"
import "shape"
import "space"



var PicBackground i32
var PicStar       i32
var PicShapeTile  i32
var PicRotLeft    i32
var PicRotRight   i32
var PicArrowLeft  i32
var PicArrowRight i32
var PicArrowDown  i32
var PicMouse      i32
var PicMouseLMB   i32
var PicMouseRMB   i32
//var dir         str

var HackyHeightFraction f32 = 0.61458333333



func Init () {
	str.print("gameDraw.Init ()")
	
	// BELOW (MORE PROPER) CALCULATION DOESN'T WORK FOR SOME REASON, 
	// SO......HARDWIRED VALUE AT DECLARATION (FIXME when CX FIXES THIS) 
	//HackyHeightFraction = f32.div(i32.f32(app.START_WIDTH), i32.f32(app.START_HEIGHT))

	InitControlsText()

	// pics 
	PicBackground = gl.NewTexture("../CXtris/assets/textures/background.jpg")
	PicStar       = gl.NewTexture("../CXtris/assets/textures/star.png")
	PicShapeTile  = gl.NewTexture("../CXtris/assets/textures/tile.png")
	PicRotLeft    = gl.NewTexture("../CXtris/assets/textures/rotate-left.png")
	PicRotRight   = gl.NewTexture("../CXtris/assets/textures/rotate-right.png")
	PicArrowLeft  = gl.NewTexture("../CXtris/assets/textures/arrow-left.png")
	PicArrowRight = gl.NewTexture("../CXtris/assets/textures/arrow-right.png")
	PicArrowDown  = gl.NewTexture("../CXtris/assets/textures/arrow-down.png")
	PicMouse      = gl.NewTexture("../CXtris/assets/textures/mouse.png")   
	PicMouseLMB   = gl.NewTexture("../CXtris/assets/textures/mouse-lmb.png")
	PicMouseRMB   = gl.NewTexture("../CXtris/assets/textures/mouse-rmb.png")
}


func All () {
	//gl.MatrixMode(gl.PROJECTION)
	//gl.LoadIdentity()
	//gl.MatrixMode(gl.MODELVIEW)

	scaledPic(PicBackground, 0.0, 0.0, 1.0, 1.0)
	PlayField()
	PlayerPiece()

	if main.ShowNextShape {
		NextShape()
	}
	
	if app.Mode < app.MODE_MENU_MAX { // in a menu 
		menu.DrawRects()
		
		if app.Mode == app.MODE_MENU_CONTROLS {
			drawVirtualKeyBackdrops()
		}
	}else
	if app.Mode == app.MODE_PLAYING {
		if gui.ShowControls {
			drawVirtualKeyBackdrops()
		}
	}
	
	// cursor/pointer 
	sizedPicAt(PicStar, 
		inputs.MousePointer.X,
		inputs.MousePointer.Y, 
		0.1  * 0.3, 
		0.07 * 0.3)
	
	gl.LoadIdentity()
	allText()
}


func sizedPicAt (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)

	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(0.5, -0.5, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-0.5, -0.5, 0.0)
	gl.End()
}


func SizedNotStretchedPicAt (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	var tosy f32 = scaleY / 3.0 // 3rd of scale y 
	var ome f32 // offset (to) middle (section) extent 
	ome = scaleX - tosy
	ome = ome - tosy
	ome = ome / 2.0
	ome = ome * 0.5
	
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)

	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-0.5, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-0.5, -0.5, 0.0)



		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)



		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(0.5, -0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
	gl.End()
}


func scaledPic (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)
	
	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(1.0, -1.0, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-1.0, -1.0, 0.0)
	gl.End()
}


func PlayField () {
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 =     -0.95 + map.CellHeightHalf

	for y := 0; y < map.NUM_CELLS_Y; y++ {
	for x := 0; x < map.NUM_CELLS_X; x++ {
		var c i32 = map.Cells[y][x]

		if c == map.EMPTY_CELL {
			c = shape.SHAPE_MAX
		}
		
		gl.Color3f(
			draw.Colors[c].R, 
			draw.Colors[c].G, 
			draw.Colors[c].B)
		
		scaledPic(
			PicShapeTile, 
			f32.add(fX, f32.mul(i32.f32(x), map.CellWidth)),
			f32.add(fY, f32.mul(i32.f32(y), map.CellHeight)), 
			map.CellWidthHalf, 
			map.CellHeightHalf)
	}
	}
}


func PlayerPiece () {
	gl.Color3f(
		draw.Colors[shape.PlayerShape].R, 
		draw.Colors[shape.PlayerShape].G, 
		draw.Colors[shape.PlayerShape].B)
	
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 =     -0.95 + map.CellHeightHalf

	for y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			if shape.Cells[shape.PlayerShape][shape.PlayerFacing][y][x] {
				scaledPic(
					PicShapeTile, 
					f32.add(fX, f32.mul(i32.f32(x - 2 + shape.PlayerPos.X), map.CellWidth)),
					f32.add(fY, f32.mul(i32.f32(y - 2 + shape.PlayerPos.Y), map.CellHeight)), 
					map.CellWidthHalf, 
					map.CellHeightHalf)
			}
		}
	}
}


func NextShape () {
	gl.Color3f(
		draw.Colors[shape.Next].R, 
		draw.Colors[shape.Next].G, 
		draw.Colors[shape.Next].B)
	
	var fX f32 = shape.StartPosX
	var fY f32 = shape.StartPosY
	
	for y := shape.StartY; y < 5; y++ {
		for x := shape.StartX; x < 5; x++ {
			if shape.Cells[shape.Next][shape.FACING_UP][y][x] {
				scaledPic(
					PicShapeTile, 
					fX,
					fY, 
					shape.NextCellScaleX, 
					shape.NextCellScaleY)
			}
			
			fX = f32.add(fX, shape.NextCellSpanX)
		}
		
		fX = shape.StartPosX
		fY = f32.add(fY, shape.NextCellSpanY)
	}
}
