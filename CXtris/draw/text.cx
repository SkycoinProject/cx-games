package main

import "gltext"



var currColor       i32
var nextColorTime   f64
// for animation of "GAME OVER" text 
var gameOverExtent  f32 = 25.0
var gameOverOffset  f32
var gameOverUpwards bool



func allText () { 
	gl.Enable(gl.DEPTH_TEST)
		/*
		// testing a bottom edge anchored vertical span of texts 
		draw.SetColor3(draw.Colors[draw.COLOR_YELLOW])
		for i := 0; i < len(keySetPri); i++ {
			gltext.Printf(
				keySetPri[i].FontId, 
				keySetPri[i].Left, 
				keySetPri[i].Top, 
				keySetPri[i].Text)
		}
		*/
		
		draw.SetColor3(draw.White)
		scoreText()
		
		
		var nameX f32 = 150.0
		var nameScale f32 = 0.7
		var vo f32 = -38.0 // vertical offset 
		draw.OutlinedText(app.Name, draw.COLOR_CYAN, nameX, vo, nameScale)
		
		
		
		if app.Mode < app.MODE_MENU_MAX { // in a menu 
			if app.Mode == app.MODE_MENU_CONTROLS {
				drawKeyCapTexts()
			}
		}else
		if app.Mode == app.MODE_PLAYING {
			if gui.ShowControls {
				drawKeyCapTexts()
			}
		}else
		if app.Mode == app.MODE_GAME_OVER {
			var le /* left edge */ f32 = 21.0
			
			// bounce text up & down 
			if gameOverUpwards {
				gameOverOffset = f32.add(gameOverOffset, f64.f32(DeltaTime) * 125.0)
				
				if gameOverOffset > gameOverExtent {
					gameOverUpwards = !gameOverUpwards
				}
			}else{ // downwards 
				gameOverOffset = f32.sub(gameOverOffset, f64.f32(DeltaTime) * 125.0)

				if gameOverOffset < -gameOverExtent {
					gameOverUpwards = !gameOverUpwards
				}
			}



			// darker chain of background text 
			for f := f32.sub(0.0, le); f < 2.0; f = f = f32.add(f, 1.0) {
				draw.OutlinedText("GAME OVER", draw.COLOR_GRAY_DARK,
					le + f, f32.add(i32.f32(app.START_HEIGHT / 2), f) + gameOverOffset, 1.0)
			}
			
			// cycling thru (mostly) bright colors on top 
			var y f32 = f32.add(i32.f32(app.START_HEIGHT / 2), gameOverOffset)
			draw.OutlinedText("GAME OVER", currColor, le, y, 1.0)
			
			if (nextColorTime <= CurrTime) {
				nextColorTime  = CurrTime + 0.1D
				currColor++			
				
				var max i32 = len(draw.Colors)
				if currColor >= max {
					currColor = 0
				}
			}
		}
	gl.Disable(gl.DEPTH_TEST)
}


func scoreText () {
	var sX f32 = i32.f32(i32.sub(app.START_WIDTH, 59))
	var sY f32 = i32.f32(93) //app.START_HEIGHT)
	gl.LoadIdentity()
	gl.Color3f(1.0, 1.0, 1.0)
	gltext.Printf("Roboto28", sX, sY, shape.PlayerScoreTxt)
}
