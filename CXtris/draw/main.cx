package main

import "draw"



var HackyHeightFraction f32 = 0.61458333333
var PicBackground       i32



func drawInit () {
	str.print("drawInit ()")
	
	// THE (MORE PROPER) CALCULATION BELOW, DOESN'T WORK FOR SOME REASON, 
	// SO......HARDWIRED VALUE AT DECLARATION (FIXME when CX FIXES THIS) 
	//HackyHeightFraction = f32.div(i32.f32(app.START_WIDTH), i32.f32(app.START_HEIGHT))

	draw.Init()
	PicBackground = 
	draw.AddPic("background.jpg")
	draw.InitPics()
	InitControlsText()
}


func drawAll () {
	//gl.Clear(gl.COLOR_BUFFER_BIT)
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT) // gltext needs 
		
	//gl.MatrixMode(gl.PROJECTION)
	//gl.LoadIdentity()
	//gl.MatrixMode(gl.MODELVIEW)

	gl.Color3f(1.0, 1.0, 1.0)
	draw.ScaledPic(PicBackground, 0.0, 0.0, 2.0, 2.0)
	PlayField()
	PlayerPiece()

	if ShowNextShape {
		NextShape()
	}
	
	if menu.IsOpenThenDrewIt() {
		if app.Mode == app.MODE_MENU_CONTROLS {
			drawVirtualKeyBackdrops()
		}
	}else
	if app.Mode == app.MODE_PLAYING {
		if gui.ShowControls {
			drawVirtualKeyBackdrops()
		}
	}
	
	// cursor/pointer 
	/*
	draw.ScaledPic(draw.PicStar, 
		inputs.MousePointer.X,
		inputs.MousePointer.Y, 
		0.1  * 0.3, 
		0.07 * 0.3)
	*/
	
	gl.LoadIdentity()
	allText()
}


func PlayField () {
	var fX f32 = tiles.LEdge + tiles.CellWidthHalf  // bottom left corner anchor 
	var fY f32 =     -0.95 + tiles.CellHeightHalf //            ^ 
	var osY /* offset in Y */ f32

	for     y := 0; y < tiles.NUM_CELLS_Y; y++ {
		osY = getOffsetForWholeRow(y)
		
		for x := 0; x < tiles.NUM_CELLS_X; x++ {
			var c i32 = tiles.Cells[y][x]
			
			if c == tiles.EMPTY_CELL {
				c = shape.SHAPE_MAX // set to last color (dark gray) 
			}
			
			gl.Color3f(
				draw.Colors[c].R, 
				draw.Colors[c].G, 
				draw.Colors[c].B)
			
			draw.ScaledPic(
				draw.PicShapeTile, 
				f32.add(fX, f32.mul(i32.f32(x), tiles.CellWidth)),
				f32.add(fY, f32.mul(i32.f32(y), tiles.CellHeight)) - osY, 
				tiles.CellWidth, 
				tiles.CellHeight)
		}
	}
}


func getOffsetForWholeRow (y i32) (osY f32) {
	osY = 0.0
	
	if len(tiles.CollapsingRows) != 0 {
		var del f64 = CurrTime - tiles.CollapseStartTime // time delta 
		var dura /* ...tion of smooth slide */ f64 = DropDelta * 0.2D

		// calculate a potential offset for smooth sliding interpolation 
		if del < dura {
			for i := 0; i < len(tiles.CollapsingRows); i++ {
				if tiles.CollapsingRows[i] <= y {
					osY = f32.add(osY, f64.f32(del / dura) * tiles.CellHeight - tiles.CellHeight)
				}
			}
		}else{
			// transition time is up, clear slice 
			for len(tiles.CollapsingRows) > 0 {
				tiles.CollapsingRows = remove(tiles.CollapsingRows, 0)
			}
		}
	}
}


func PlayerPiece () {
	var fX  f32 = tiles.LEdge + tiles.CellWidthHalf
	var fY  f32 =     -0.95 + tiles.CellHeightHalf
	var del f64 = CurrTime - shape.PlayerMoveTime // time delta 
	var osX f32 // offset 
	var osY f32 //   ^ 
	var dura /* ...tion of smooth slide */ f64 = DropDelta * 0.2D
	
	// calculate a potential offset for smooth sliding interpolation 
	if del < dura {
		if shape.PlayerPos.X == shape.PlayerPosPrev.X {
			osX = 0.0
		}else
		if shape.PlayerPos.X >  shape.PlayerPosPrev.X {
			osX = f64.f32(del / dura) * -tiles.CellWidth + tiles.CellWidth
		}else{
			osX = f64.f32(del / dura) * tiles.CellWidth - tiles.CellWidth
		}

		if shape.PlayerPos.Y == shape.PlayerPosPrev.Y {
			osY = 0.0
		}else{
			osY = f64.f32(del / dura) * tiles.CellHeight - tiles.CellHeight
		}
	}else{
		osX = 0.0
		osY = 0.0
	}
				
	gl.Color3f(
		draw.Colors[shape.PlayerShape].R, 
		draw.Colors[shape.PlayerShape].G, 
		draw.Colors[shape.PlayerShape].B)
	
	for     y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			if shape.Cells[shape.PlayerShape][shape.PlayerFacing][y][x] {
				draw.ScaledPic(
					draw.PicShapeTile, 
					f32.add(fX, f32.mul(i32.f32(x - 2 + shape.PlayerPos.X), tiles.CellWidth))  - osX,
					f32.add(fY, f32.mul(i32.f32(y - 2 + shape.PlayerPos.Y), tiles.CellHeight)) - osY,
					tiles.CellWidth, 
					tiles.CellHeight)
			}
		}
	}
}


func NextShape () {
	gl.Color3f(
		draw.Colors[shape.Next].R, 
		draw.Colors[shape.Next].G, 
		draw.Colors[shape.Next].B)
	
	var fX f32 = shape.StartPosX
	var fY f32 = shape.StartPosY
	
	for     y := shape.StartY; y < 5; y++ {
		for x := shape.StartX; x < 5; x++ {
			if shape.Cells[shape.Next][shape.FACING_UP][y][x] {
				draw.ScaledPic(
					draw.PicShapeTile, 
					fX,
					fY, 
					shape.NextCellSpanX, 
					shape.NextCellSpanY)
			}
			
			fX = f32.add(fX, shape.NextCellSpanX)
		}
		
		fX = shape.StartPosX
		fY = f32.add(fY, shape.NextCellSpanY)
	}
}
