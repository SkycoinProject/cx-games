package shape

import "app"
import "main"
import "menu"
import "tiles"



var SHAPE_BEAM     i32
var SHAPE_L        i32 = 1
var SHAPE_L_MIRROR i32 = 2
var SHAPE_ZIGZAG   i32 = 3
var SHAPE_ZAGZIG   i32 = 4
var SHAPE_MIDTINE  i32 = 5
var SHAPE_CUBE     i32 = 6
var SHAPE_MAX      i32 = 7

var FACING_UP    i32
var FACING_RIGHT i32 = 1
var FACING_DOWN  i32 = 2
var FACING_LEFT  i32 = 3
var FACING_MAX   i32 = 4

var Next i32

//type Shape struct { FIXME: ATM CX can't do multidimensional arrays/slices inside a struct 
	// shapes/pieces occupy a 5x5 grid of cells 
	// 1st 2 indexes are SHAPE_MAX, then FACING_MAX, so we can store all rotations of all pieces 
	// 0,0 (in the last 2 indexes) is the bottom left corner, same as map/playfield cells 
	var Cells [7][4][5][5]bool // player piece    FIXME?: ATM CX can't handle "constants" as array sizes 
	// extents are how many cells go out from the center (2,2) 
	var Extents [7][4][4]i32
//}

var PlayerPos      Vec2I
var PlayerPosPrev  Vec2I
var PlayerMoveTime f64    // the latest 
var PlayerFacing   i32
var PlayerShape    i32
var PlayerScore    i32 =  0
var PlayerScoreTxt str = "0"



func SpawnNew () {
	if app.Mode == app.MODE_GAME_OVER {
		return // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	}
	
	main.CalcDropTime()

	PlayerFacing = 0
	PlayerShape  = Next
	Next         = i32.rand(0, SHAPE_MAX)
	setupSizesAndOffsetsForNext()
	
	var i i32 = Extents[PlayerShape][PlayerFacing][FACING_UP] + 1
	PlayerPos = app.Vec2I{ X: 4, Y: tiles.NUM_CELLS_Y - i }
	PlayerPosPrev = PlayerPos // looked kinda cool before this reset... 
	                          // ...fix, but it felt buggy to ME 
	
	if bool.not(enoughCellsOpenForMoveDeltaAndDir(0, 0, PlayerFacing)) {
		app.Mode = app.MODE_GAME_OVER
	}
}


func AttemptRotate (change i32) {
	if app.Mode != app.MODE_PLAYING ||
		PlayerShape == SHAPE_CUBE {
			
		return
	}
	
	// RESTRICT THESE SHAPES TO TOGGLE BETWEEN 2 VALID STATES. 
	// OTHERWISE THEY HAVE 4 VALID STATES, AND APPEAR TO CIRCLE 
	// AROUND CENTER/PIVOT CELL (OF 5,5 GRID) WHICH LOOKS 
	// UNBALANCED, ODD & DISORIENTING 
	if PlayerShape == SHAPE_BEAM ||
		PlayerShape == SHAPE_ZIGZAG ||
		PlayerShape == SHAPE_ZAGZIG {
		
		if PlayerFacing == FACING_UP {
			if enoughCellsOpenForMoveDeltaAndDir(0, 0, FACING_RIGHT) {
				PlayerFacing = FACING_RIGHT
			}else{
				attemptMoveDownThenNewDir(FACING_RIGHT)				
			}
			
			return // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		} else if PlayerFacing == FACING_RIGHT {
			if enoughCellsOpenForMoveDeltaAndDir(0, 0, FACING_UP) {
				PlayerFacing = FACING_UP
			}
			
			return // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		}
	}
	

	var wantedFacing i32 = i32.add(PlayerFacing, change)
	
	// wrap-around (stay in valid range) 
	if wantedFacing >= FACING_MAX {
		wantedFacing = FACING_UP
	}	
	if wantedFacing < FACING_UP {
		wantedFacing = FACING_LEFT
	}

	if enoughCellsOpenForMoveDeltaAndDir(0, 0, wantedFacing) {
		PlayerFacing = wantedFacing
	} else {
		attemptMoveDownThenNewDir(wantedFacing)
		
		// TODO: 
		// WOULD BE NICE TO BE ABLE TO PLAY A BZZZZT / ERROR SOUND HERE
		// but we could print red text saying something 
	}
}


func AttemptMoveByOffset (x i32, y i32) (moved bool) {
	// FIXME?: 
	// allow jumps? (to instazoom down to the bottom) 
	// cuz then we'd call this with an x,y 
	// change greater than 1?  thereby needing to check 
	// in-between positions for collision (each +1 step) 
	
	if /* going left */ x < 0 &&
		PlayerPos.X > 0 + Extents[PlayerShape][PlayerFacing][FACING_LEFT] && 
		enoughCellsOpenForMoveDeltaAndDir(x, y, PlayerFacing) {
		
		PlayerPosPrev = PlayerPos
		PlayerPos.X = i32.add(PlayerPos.X, x)
		PlayerMoveTime = main.CurrTime
		moved = true
	} else
	if /* going right */ x > 0 &&
		PlayerPos.X < tiles.NUM_CELLS_X - 1 - Extents[PlayerShape][PlayerFacing][FACING_RIGHT] &&
		enoughCellsOpenForMoveDeltaAndDir(x, y, PlayerFacing) {
		
		PlayerPosPrev = PlayerPos
		PlayerPos.X = i32.add(PlayerPos.X, x)
		PlayerMoveTime = main.CurrTime
		moved = true
	}
	
	if /* going down */ y < 0 {
		if PlayerPos.Y > 0 + Extents[PlayerShape][PlayerFacing][FACING_DOWN] {
			if enoughCellsOpenForMoveDeltaAndDir(x, y, PlayerFacing) {
				PlayerPosPrev = PlayerPos
				PlayerPos.Y = i32.add(PlayerPos.Y, y)
				PlayerMoveTime = main.CurrTime
				moved = true
			}else{
				freezeShape()
			}
		} else {
			freezeShape()
		}
	} else
	if /* going up */ y > 0 && // UNWANTED/UNUSED IN CXTRIS 
		PlayerPos.Y < tiles.NUM_CELLS_Y - 1 - Extents[PlayerShape][PlayerFacing][FACING_UP] {
		
		PlayerPos.Y = i32.add(PlayerPos.Y, y)
	}
}


func attemptMoveDownThenNewDir (dir i32) {
	if AttemptMoveByOffset(0, -1) &&
		enoughCellsOpenForMoveDeltaAndDir(0, 0, dir) {
			
		PlayerFacing = dir		
	}
}


func enoughCellsOpenForMoveDeltaAndDir (xOff i32, yOff i32, facing i32) (out bool) {
	out = true
	
	for y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			if Cells[PlayerShape][facing][y][x] {
				var mY i32 = PlayerPos.Y - 2 + y + yOff
				var mX i32 = PlayerPos.X - 2 + x + xOff
				
				//printf("mX, mY: %d, %d \n", mX, mY)
				
				if mX < 0 ||
					mX >= tiles.NUM_CELLS_X ||
					mY < 0 ||
					mY >= tiles.NUM_CELLS_Y {
					
					out = false
					return
				}
				
				if tiles.Cells[mY][mX] != tiles.EMPTY_CELL {
					out = false
				}
			}
		}
	}
}


func freezeShape () {
	if app.Mode == app.MODE_PLAYING {
		for y := 0; y < 5; y++ {
			for x := 0; x < 5; x++ {
				if Cells[PlayerShape][PlayerFacing][y][x] {
					tiles.Cells[PlayerPos.Y - 2 + y][PlayerPos.X - 2 + x] = PlayerShape
				}
			}
		}
	}
	
	// collapse full rows & change score 
	var numRowsFilled i32
	var start i32 = i32.sub(PlayerPos.Y, Extents[PlayerShape][PlayerFacing][FACING_DOWN])
	var end   i32 = i32.add(PlayerPos.Y, Extents[PlayerShape][PlayerFacing][FACING_UP])
	for y := start; y <= end; y++ {
		//printf("y: %d, end: %d \n", y, end)
		
		var rowFull bool = true
			
		for x := 0; bool.and(rowFull, x < tiles.NUM_CELLS_X); x++ {
			//printf("x: %d \n", x)
			
			if tiles.Cells[y][x] == tiles.EMPTY_CELL {
				rowFull = false
			}
		}
		
		//str.print("if rowFull")
		
		if rowFull {
			tiles.CollapsingRows = append(
			tiles.CollapsingRows, y)
			tiles.CollapseStartTime = main.CurrTime
			numRowsFilled = i32.add(numRowsFilled, 1)
		
			// shift all-rows-above down by one 
			for j := i32.add(y, 1); j < tiles.NUM_CELLS_Y; j++ {
				for i := 0; i < tiles.NUM_CELLS_X; i++ {
					var lj i32 = i32.sub(j, 1) // lesser j 
					tiles.Cells[lj][i] =	
					tiles.Cells[j][i]
				
					if /* on the top row */ j == i32.sub(tiles.NUM_CELLS_Y, 1) {
						tiles.Cells[j][i] = tiles.EMPTY_CELL // clear row 
					}
				}
			}
			
			// upper rows shifted down, 
			// go back 1 to prevent skipping 2 consecutive filled rows 
			y = i32.sub(y, 1) 
		}
	}
	
	if numRowsFilled > 0 {
		var delta i32 = i32.mul(numRowsFilled, numRowsFilled)		
		//var delta i32 = i32.pow(numRowsFilled, numRowsFilled)		
		PlayerScore = i32.add(PlayerScore, delta)
		PlayerScoreTxt = sprintf("%d", PlayerScore)
		printf("+ %d    SCORE: %s \n", delta, PlayerScoreTxt)
	}
	
	SpawnNew()
}
