package shape

//import "app"
import "map"



var CenterOfBoxX f32 = 0.71
var CenterOfBoxY f32 = 0.51 
var SpanOfBoxX   f32 = 0.48
var SpanOfBoxY   f32 = 0.23

var MostCellsAcross i32
var MostCellsInX    i32
var MostCellsInY    i32

var Next            i32
var NextCellSpanX   f32 = f32.mul(map.CellWidth,  0.7)
var NextCellSpanY   f32 = f32.mul(map.CellHeight, 0.7)
var StartX          i32 // indices 
var StartY          i32
var StartPosX       f32
var StartPosY       f32



func setupSizesAndOffsetsForNext () {
	MostCellsAcross = 0
	MostCellsInX    = 0
	MostCellsInY    = 0
	StartX = 2 - Extents[Next][FACING_UP][FACING_LEFT]
	StartY = 2 - Extents[Next][FACING_UP][FACING_DOWN]
	var ex i32



	ex = Extents[Next][FACING_UP][FACING_UP] +
		 Extents[Next][FACING_UP][FACING_DOWN]
		 
	if MostCellsAcross < ex {
		MostCellsAcross = ex
	}

	if MostCellsInY < ex {
		MostCellsInY = ex
	}



	ex = Extents[Next][FACING_UP][FACING_LEFT] +
		 Extents[Next][FACING_UP][FACING_RIGHT]
		 
	if MostCellsAcross < ex {
		MostCellsAcross = ex
	}
	
	if MostCellsInX < ex {
		MostCellsInX = ex
	}



	MostCellsAcross = i32.add(MostCellsAcross, 1)
	MostCellsInX    = i32.add(MostCellsInX, 1)
	MostCellsInY    = i32.add(MostCellsInY, 1)
	
	var halfX f32 = NextCellSpanX / 2.0
	var halfY f32 = NextCellSpanY / 2.0
	StartPosX = CenterOfBoxX - i32.f32(MostCellsInX) * NextCellSpanX / 2.0 + halfX
	StartPosY = CenterOfBoxY - i32.f32(MostCellsInY) * NextCellSpanY / 2.0 + halfY
}