package shape



func setupAllShapes () {
	setupAllPossibleRotations(
		SHAPE_BEAM,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 1,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0)
	
	setupAllPossibleRotations(
		SHAPE_L,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 1, 0, 0, 0,
		0, 0, 0, 0, 0)
		/*
		0, 0, 0, 0, 0,
		0, 1, 0, 0, 0,
		0, 1, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 0, 0)
		*/
	
	setupAllPossibleRotations(
		SHAPE_L_MIRROR,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 1, 0,
		0, 0, 0, 0, 0)
		/*
		0, 0, 0, 0, 0,
		0, 0, 0, 1, 0,
		0, 0, 0, 1, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 0, 0)
		*/
	
	setupAllPossibleRotations(
		SHAPE_ZIGZAG,
		0, 0, 0, 0, 0,
		0, 1, 0, 0, 0,
		0, 1, 1, 0, 0,
		0, 0, 1, 0, 0,
		0, 0, 0, 0, 0)
		/*
		0, 0, 0, 0, 0,
		0, 1, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 1, 0,
		0, 0, 0, 0, 0)
		*/
	
	setupAllPossibleRotations(
		SHAPE_ZAGZIG,
		0, 0, 0, 0, 0,
		0, 0, 0, 1, 0,
		0, 0, 1, 1, 0,
		0, 0, 1, 0, 0,
		0, 0, 0, 0, 0)
		/*
		0, 0, 0, 0, 0,
		0, 0, 0, 1, 0,
		0, 1, 1, 1, 0,
		0, 1, 0, 0, 0,
		0, 0, 0, 0, 0)
		*/
	
	setupAllPossibleRotations(
		SHAPE_MIDTINE,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 0, 1, 0, 0,
		0, 0, 0, 0, 0)
	
	setupAllPossibleRotations(
		SHAPE_CUBE,
		0, 0, 0, 0, 0,
		0, 1, 1, 0, 0,
		0, 1, 1, 0, 0,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0)
		/*
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 1, 1, 1, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 0, 0)
		*/
}


func setupAllPossibleRotations (shape i32,
	a i32, b i32, c i32, d i32, e i32,
	f i32, g i32, h i32, i i32, j i32,
	k i32, l i32, m i32, n i32, o i32,
	p i32, q i32, r i32, s i32, t i32,
	u i32, v i32, w i32, x i32, y i32) {
	
	Cells[shape][0][0][0] = getBoolAndSetExtents(0, 0, u, shape)
	Cells[shape][0][0][1] = getBoolAndSetExtents(0, 1, v, shape)
	Cells[shape][0][0][2] = getBoolAndSetExtents(0, 2, w, shape)
	Cells[shape][0][0][3] = getBoolAndSetExtents(0, 3, x, shape)
	Cells[shape][0][0][4] = getBoolAndSetExtents(0, 4, y, shape)
	
	Cells[shape][0][1][0] = getBoolAndSetExtents(1, 0, p, shape)
	Cells[shape][0][1][1] = getBoolAndSetExtents(1, 1, q, shape)
	Cells[shape][0][1][2] = getBoolAndSetExtents(1, 2, r, shape)
	Cells[shape][0][1][3] = getBoolAndSetExtents(1, 3, s, shape)
	Cells[shape][0][1][4] = getBoolAndSetExtents(1, 4, t, shape)
	
	Cells[shape][0][2][0] = getBoolAndSetExtents(2, 0, k, shape)
	Cells[shape][0][2][1] = getBoolAndSetExtents(2, 1, l, shape)
	Cells[shape][0][2][2] = getBoolAndSetExtents(2, 2, m, shape)
	Cells[shape][0][2][3] = getBoolAndSetExtents(2, 3, n, shape)
	Cells[shape][0][2][4] = getBoolAndSetExtents(2, 4, o, shape)
	
	Cells[shape][0][3][0] = getBoolAndSetExtents(3, 0, f, shape)
	Cells[shape][0][3][1] = getBoolAndSetExtents(3, 1, g, shape)
	Cells[shape][0][3][2] = getBoolAndSetExtents(3, 2, h, shape)
	Cells[shape][0][3][3] = getBoolAndSetExtents(3, 3, i, shape)
	Cells[shape][0][3][4] = getBoolAndSetExtents(3, 4, j, shape)
	
	Cells[shape][0][4][0] = getBoolAndSetExtents(4, 0, a, shape)
	Cells[shape][0][4][1] = getBoolAndSetExtents(4, 1, b, shape)
	Cells[shape][0][4][2] = getBoolAndSetExtents(4, 2, c, shape)
	Cells[shape][0][4][3] = getBoolAndSetExtents(4, 3, d, shape)
	Cells[shape][0][4][4] = getBoolAndSetExtents(4, 4, e, shape)
	
	//showExtents(FACING_UP)
	
	bakeRotation(shape, FACING_LEFT)
	bakeRotation(shape, FACING_DOWN)
	bakeRotation(shape, FACING_RIGHT)
}


// i wanted to input the values of pieces in a visual way 
// (via a grid of 0s & 1s)
// even tho in the end they will be bool values.  
// this converts i32 to bool, and sets how many blocks the shape
// extends from its centerpoint (2,2) 
func getBoolAndSetExtents (y i32, x i32, i i32, shape i32) (out bool) {
	if i != 0 {
		out = true
	
		x = i32.sub(x, 2)
		y = i32.sub(y, 2)
		
		if x < 0 {
			x = i32.abs(x)

			if Extents[shape][0][FACING_LEFT] < x {
				Extents[shape][0][FACING_LEFT] = x
			}
		} else
		if x > 0 {
			if Extents[shape][0][FACING_RIGHT] < x {
				Extents[shape][0][FACING_RIGHT] = x
			}
		}
		
		if y < 0 {
			y = i32.abs(y)
			
			if Extents[shape][0][FACING_DOWN] < y {
				Extents[shape][0][FACING_DOWN] = y
			}
		} else
		if y > 0 {
			if Extents[shape][0][FACING_UP] < y {
				Extents[shape][0][FACING_UP] = y
			}
		}
	}
}


// this rotates the top towards the left (CCW) 
func bakeRotation (shape i32, newFacing i32) {
	var oldFacing i32 = newFacing + 1
	
	if oldFacing >= FACING_MAX {
		oldFacing = FACING_UP
	}
	
	Extents[shape][newFacing][FACING_UP] = Extents[shape][oldFacing][FACING_RIGHT]
	Extents[shape][newFacing][FACING_RIGHT] = Extents[shape][oldFacing][FACING_DOWN]
	Extents[shape][newFacing][FACING_DOWN] = Extents[shape][oldFacing][FACING_LEFT]
	Extents[shape][newFacing][FACING_LEFT] = Extents[shape][oldFacing][FACING_UP]

	j := 4 // the y in new grid 
	for y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			Cells[shape][newFacing][x][j] = 
			Cells[shape][oldFacing][y][x]
		}
		
		j--	
	}
	
	//showExtents(newFacing)
}


func showExtents (facing i32) {
	str.print("------------------------show extents-----------------------")
	printf("UpExtent   : %d \n", Extents[PlayerShape][facing][FACING_UP])
	printf("RightExtent: %d \n", Extents[PlayerShape][facing][FACING_RIGHT])
	printf("DownExtent : %d \n", Extents[PlayerShape][facing][FACING_DOWN])
	printf("LeftExtent : %d \n", Extents[PlayerShape][facing][FACING_LEFT])
}
