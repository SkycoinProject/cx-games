package main



var FALLING_COIN    i32 = MAX_UNIQUES + 1
var FLOATING_COIN   i32 = MAX_UNIQUES + 2 // for menu backdrop 
var SCROLLING_CLOUD i32 = MAX_UNIQUES + 3 // gameplay backdrop 



func spawnMenuCoinsBackdrop () {
	/*
	var r f32 = 0.1 // radius 
	var startX f32 = space.ViewEdgeL - r
	var x f32 = startX
	var y f32 = -0.8
	var incX f32 = f32.mul(r, 2.0) * 1.33 // 1/3 ratio gap tween them 
	var incY f32 = f32.mul(r, 2.0) * 0.83
	
	for     y < 1.0 {
		for x < space.ViewEdgeR {
			ent = entities.Entity{
				Type: FLOATING_COIN,
				x: x, 
				y: y, 
				vx: y, 
				//vy: -0.1, 
				radius: r, 
				WrapView: true }
			entities.All = append(
			entities.All, ent)
			
			x = x + incX
		}	

		x = startX
		y = y + incY
	}	
	*/
}


func spawnCloudsBackdrop () {
	var eY f32 = 0.07 // extent Y 
	var ex app.Vec2   // extents 
	ex =   app.Vec2{ 
		X: eY * cloudAspectRatio, 
		Y: eY }	
	
	var startX f32 = space.ViewEdgeL - ex.X
	var x f32 = startX
	var y f32 = 0.1
	var incX f32 = f32.mul(ex.X, 2.0) * 1.33 // 1/3 ratio gap tween them 
	var incY f32 = f32.mul(ex.Y, 2.0) * 0.83
	
	for     y < entities.All[DROPPER].y -
		        entities.All[DROPPER].Extents.Y {
		        	
		for x < space.ViewEdgeR /*+ r*/ {
			ent = entities.Entity{
				Type: SCROLLING_CLOUD,
				x: x, 
				y: y, 
				vx: y, 
				//vy: -0.1, 
				Extents: ex, 
				WrapView: true }
			entities.All = append(
			entities.All, ent)
			
			x = x + incX
		}	

		x = startX
		y = y + incY
	}	
}