package main

import "app"
import "entities"
import "inputs"



// entity ids 
var PLAYER          i32
var DROPPER         i32 = 1 // coin DROPPER 
// dropper reverse logic 
var reverseTarget   f32
var numTargetGrains i32 = 100



func gameInit () {
	app.Init("S k y B O O M", "Move with mouse.")
	draw.Init()
	inputs.Init(true)
	entities.Init()
	
	// entities 
	var ent entities.Entity
	
	// PLAYER 
	ent = entities.Entity{ radius: 0.2, y: -1.0 }
	entities.All = append(
	entities.All, ent)
	
	// DROPPER 
	ent = entities.Entity{ radius: 0.1, y:  1.0, vx: 0.03 }
	entities.All = append(
	entities.All, ent)
	
	setReverseTarget()
}


func gameUpdate () {
	respondToPointerEvents()
	respondToButtonEvents()
	respondToKeyEvents()
	
	entities.Update()
	entities.All[PLAYER].x = inputs.MousePointer.X
	handleDropperReversing()
}


func handleDropperReversing () {
	if     entities.All[DROPPER].vx < 0.0 {
		// going left 
		if entities.All[DROPPER].x < reverseTarget {
			reverseDropper()
		}else
		if entities.All[DROPPER].x < f64.f32(space.ViewEdgeL) {
			reverseDropper()
		}
	}else{
		// going right 
		if entities.All[DROPPER].x > reverseTarget {
			reverseDropper()
		}else
		if entities.All[DROPPER].x > f64.f32(space.ViewEdgeR) {
			reverseDropper()
		}
	}
}


func reverseDropper () {
	var vX f32 = entities.All[DROPPER].vx
	entities.All[DROPPER].vx = -vX
	setReverseTarget()
}


func setReverseTarget () {
	var pd f32 // potential distance 

	if entities.All[DROPPER].vx > 0.0 { 
		// going right 
		pd = f32.sub(f64.f32(space.ViewEdgeR), entities.All[DROPPER].x)
		printf("pd: %f \n", pd)
	}else{ 
		// going left 
		pd = f32.sub(f64.f32(space.ViewEdgeL), entities.All[DROPPER].x)
		printf("pd: %f \n", pd)
	}
	
	var targetGrainSize f32 = f32.div(pd, i32.f32(numTargetGrains))
	printf("targetGrainSize: %f \n", targetGrainSize)
	var r i32 = i32.rand(0, numTargetGrains)
	reverseTarget = f32.mul(i32.f32(r), targetGrainSize)
}


func respondToPointerEvents () {
	var pos app.Vec2
		
	for pos.X != app.TOO_BIG_F32 {
		pos = inputs.GetPointerEvent()
		//printf("x,y: %f,%f \n", pos.X, pos.Y)
	}
}


func respondToButtonEvents () {
	var button i32
	var action i32
	button, action = inputs.GetButtonEvent ()
		
	if action == glfw.Repeat { // (generated by buttons that are held longer than ___) 
	}else
	if action == glfw.Release {
	}else 
	if action == glfw.Press {
		if button == glfw.MouseButtonLeft {
			if app.Mode <= app.MODE_MENU_OPTIONS { // in a menu 
				respondToMenuClicks()
			}
			
			// do 
		}else
		if button == glfw.MouseButtonRight {
		}else 
		if button == glfw.MouseButtonMiddle {
		}
	}
}


func respondToKeyEvents () {
	var key    i32
	var action i32
	key, action = inputs.GetKeyEvent ()

	if action == glfw.Press {
		oneTimeOnly(key)
		repeaters(key)
	}else
	if action == glfw.Repeat { // (generated by keys that are held longer than ___) 
		repeaters(key)
	}else
	if action == glfw.Release {
	}
}


func oneTimeOnly (key i32) {
	if inputs.OpenedMenu(key) {
	}else{
		inputs.CloseAppOnDeveloperShortcut(key)
	}
}


func repeaters (key i32) {
	if app.Mode == app.MODE_PLAYING {
		if inputs.EventLeft(key) {
		} else
		if inputs.EventRight(key) {
		} else
		if inputs.EventUp(key) {
		} else
		if inputs.EventDown(key) {
		} else
		if inputs.EventRotateLeft(key) {
		} else
		if inputs.EventRotateRight(key) {
		}
	}
}


func respondToMenuClicks () {
}
