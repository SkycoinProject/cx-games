package main

import "app"

// DROPPER CLOUD, which drops all the coins for player to catch 



var cloudAspectRatio f32 = 1069.0 / 804.0 // multiply this with desired height 
var coinDropHeight   f32
// reverse logic 
var reverseTarget    f32
var numTargetGrains  i32 = 100
var nextDrop         f32
var dropDelay        f32 = 0.3



func dropperInit () {
	var /* extent Y */ exY f32 = 0.17
	var entY f32 = 1.0 - f32.add(exY, 0.02) // margin from top edge 
	
	ent = entities.Entity{
		y:       entY, 
		ExtentX: exY * cloudAspectRatio, 
		ExtentY: exY, 
		vx:      1.2}
	entities.Spawn(DROPPER, ent)
	
	coinDropHeight = ent.y - exY + coinExtent
	setDropperTarget()
}


func dropperUpdate () {
	handleDropperReversing()
	dropCoins()
}


func dropCoins () {	
	if nextDrop <= time.Now {
		nextDrop = time.Now + dropDelay
		
		ent = entities.Entity{ 
			x:       entities.All[DROPPER][0].x,
			y:       coinDropHeight, 
			ExtentX: coinExtent,
			ExtentY: coinExtent,
			vx:       0.0,
			vy:      -1.2}
			
		entities.Spawn(FALLING_COIN, ent)
	}
}


func handleDropperReversing () {
	if     entities.All[DROPPER][0].vx < 0.0 {
		// going left 
		if entities.All[DROPPER][0].x < reverseTarget {
			reverseDropper()
		}else
		if entities.All[DROPPER][0].x < space.ViewEdgeL {
			reverseDropper()
		}
	}else{
		// going right 
		if entities.All[DROPPER][0].x > reverseTarget {
			reverseDropper()
		}else
		if entities.All[DROPPER][0].x > space.ViewEdgeR {
			reverseDropper()
		}
	}
}


func reverseDropper () {
	var vX f32 = 
	entities.All[DROPPER][0].vx
	entities.All[DROPPER][0].vx = -vX
	setDropperTarget()
}


func setDropperTarget () {
	var pd f32 // potential distance 

	if entities.All[DROPPER][0].vx > 0.0 { 
		// going right 
		pd = f32.sub(space.ViewEdgeR, entities.All[DROPPER][0].x)
	}else{ 
		// going left 
		pd = f32.sub(space.ViewEdgeL, entities.All[DROPPER][0].x)
	}

	printf("potential distance: %f \n", pd)
	
	var targetGrainSize f32 = f32.div(pd, i32.f32(numTargetGrains))
	var r i32 = i32.rand(0, numTargetGrains)
	reverseTarget = f32.mul(i32.f32(r), targetGrainSize)
	//printf("targetGrainSize: %f \n", targetGrainSize)
}
