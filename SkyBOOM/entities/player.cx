package main


// "enums" 
var ONE_UP_SCORE_DELTA i32 = 10 // get this many to replace any missing wallet paddles 

var walletAspectRatio  f32 = 828.0 / 364.0 // multiply this with desired height 
var plr                i32 = entities.ENT_PLAYER
var score              i32
var scoreAtLastLoss    i32 // loss of a wallet paddle (from missing a coin) 
// edges of wallet paddles 
var pT /* top      */  f32
var pB /* bottom   */  f32
var pL /* left     */  f32
var pR /* right    */  f32
	


func playerEntsInit () {
	entities.AutoUpdatePlayerEnts = false
	
	var f f32  = 0.07
	var y f32  = f - 1.0
	var et i32 = plr

	// wallets/paddles/buckets 
	//		bottom 
	//		(1st player entity is autocreated) 
	entities.All[et][0].Y       = y
	entities.All[et][0].ExtentX = f * walletAspectRatio
	entities.All[et][0].ExtentY = f
	
	var ne entities.Entity	
	
	// middle 
	y = f32.add(y, f32.mul(f, 3.0))
	ne = entities.Entity{
		Y:       y,
		ExtentX: f * walletAspectRatio,
		ExtentY: f}
	entities.Spawn(et, ne)

	// top 
	y = f32.add(y, f32.mul(f, 3.0))
	ne = entities.Entity{
		Y:       y, 
		ExtentX: f * walletAspectRatio,
		ExtentY: f}
	entities.Spawn(et, ne)

	pT = f32.add(ne.Y, ne.ExtentY)					
	pB = -1.0
}


func playerEntsUpdate () {
	var n i32 = entities.GetCountOf(plr)
	
	for i := 0; i < n; i++ {
		pL, pR = getPlayerEdges(i)
		
		// 		keep entirely within view 
		if pR > space.ViewEdgeR {
			entities.All[plr][i].X = space.ViewEdgeR -
			entities.All[plr][i].ExtentX
			pL, pR = getPlayerEdges(i)
		}else
		if pL < space.ViewEdgeL {
			entities.All[plr][i].X = space.ViewEdgeL +
			entities.All[plr][i].ExtentX
			pL, pR = getPlayerEdges(i)
		}
	}
}


func addToScore () {
	score = score + 1
	
	if score - scoreAtLastLoss >= ONE_UP_SCORE_DELTA {
		scoreAtLastLoss = score
		
		if  entities.ActiveCounts[plr] < 3 { // (missing any wallet) 
			// restore a wallet paddle 
			var nc /* new count */ i32 = 
			entities.ActiveCounts[plr] + 1
			entities.ActiveCounts[plr] = nc
					
			// ...cache new top edge 
			pT = entities.All[plr][nc - 1].Y +
				 entities.All[plr][nc - 1].ExtentY

			entities.All[plr][nc - 1].X =
			entities.All[plr][0     ].X
		}
	}
}


func maybeCollideWithCoin (et i32, i i32, coinTop f32, coinRight f32, coinBottom f32, coinLeft f32) {
	if entities.ActiveCounts[plr] > 0 {
		if coinBottom < pT && // (below top of player bucket/s) 
		   coinTop    > pB {

			if     caughtCoin(i, pL, pR, coinLeft) { // edge 
					addToScore()
					entities.SpawnParticlePuffFrom(et, i)
					entities.Kill(et, i)
			}else{
				if caughtCoin(i, pL, pR, coinRight) { // edge 
					addToScore()
					entities.SpawnParticlePuffFrom(et, i)
					entities.Kill(et, i)
				}
			}
		}
	}
}
